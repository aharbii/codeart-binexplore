
examples/vector_debug:     file format elf64-x86-64


Disassembly of section .init:

0000000000001000 <_init>:
    1000:	f3 0f 1e fa          	endbr64 
    1004:	48 83 ec 08          	sub    $0x8,%rsp
    1008:	48 8b 05 d9 4f 00 00 	mov    0x4fd9(%rip),%rax        # 5fe8 <__gmon_start__@Base>
    100f:	48 85 c0             	test   %rax,%rax
    1012:	74 02                	je     1016 <_init+0x16>
    1014:	ff d0                	call   *%rax
    1016:	48 83 c4 08          	add    $0x8,%rsp
    101a:	c3                   	ret    

Disassembly of section .plt:

0000000000001020 <.plt>:
    1020:	ff 35 32 4f 00 00    	push   0x4f32(%rip)        # 5f58 <_GLOBAL_OFFSET_TABLE_+0x8>
    1026:	f2 ff 25 33 4f 00 00 	bnd jmp *0x4f33(%rip)        # 5f60 <_GLOBAL_OFFSET_TABLE_+0x10>
    102d:	0f 1f 00             	nopl   (%rax)
    1030:	f3 0f 1e fa          	endbr64 
    1034:	68 00 00 00 00       	push   $0x0
    1039:	f2 e9 e1 ff ff ff    	bnd jmp 1020 <_init+0x20>
    103f:	90                   	nop
    1040:	f3 0f 1e fa          	endbr64 
    1044:	68 01 00 00 00       	push   $0x1
    1049:	f2 e9 d1 ff ff ff    	bnd jmp 1020 <_init+0x20>
    104f:	90                   	nop
    1050:	f3 0f 1e fa          	endbr64 
    1054:	68 02 00 00 00       	push   $0x2
    1059:	f2 e9 c1 ff ff ff    	bnd jmp 1020 <_init+0x20>
    105f:	90                   	nop
    1060:	f3 0f 1e fa          	endbr64 
    1064:	68 03 00 00 00       	push   $0x3
    1069:	f2 e9 b1 ff ff ff    	bnd jmp 1020 <_init+0x20>
    106f:	90                   	nop
    1070:	f3 0f 1e fa          	endbr64 
    1074:	68 04 00 00 00       	push   $0x4
    1079:	f2 e9 a1 ff ff ff    	bnd jmp 1020 <_init+0x20>
    107f:	90                   	nop
    1080:	f3 0f 1e fa          	endbr64 
    1084:	68 05 00 00 00       	push   $0x5
    1089:	f2 e9 91 ff ff ff    	bnd jmp 1020 <_init+0x20>
    108f:	90                   	nop
    1090:	f3 0f 1e fa          	endbr64 
    1094:	68 06 00 00 00       	push   $0x6
    1099:	f2 e9 81 ff ff ff    	bnd jmp 1020 <_init+0x20>
    109f:	90                   	nop
    10a0:	f3 0f 1e fa          	endbr64 
    10a4:	68 07 00 00 00       	push   $0x7
    10a9:	f2 e9 71 ff ff ff    	bnd jmp 1020 <_init+0x20>
    10af:	90                   	nop
    10b0:	f3 0f 1e fa          	endbr64 
    10b4:	68 08 00 00 00       	push   $0x8
    10b9:	f2 e9 61 ff ff ff    	bnd jmp 1020 <_init+0x20>
    10bf:	90                   	nop
    10c0:	f3 0f 1e fa          	endbr64 
    10c4:	68 09 00 00 00       	push   $0x9
    10c9:	f2 e9 51 ff ff ff    	bnd jmp 1020 <_init+0x20>
    10cf:	90                   	nop
    10d0:	f3 0f 1e fa          	endbr64 
    10d4:	68 0a 00 00 00       	push   $0xa
    10d9:	f2 e9 41 ff ff ff    	bnd jmp 1020 <_init+0x20>
    10df:	90                   	nop
    10e0:	f3 0f 1e fa          	endbr64 
    10e4:	68 0b 00 00 00       	push   $0xb
    10e9:	f2 e9 31 ff ff ff    	bnd jmp 1020 <_init+0x20>
    10ef:	90                   	nop
    10f0:	f3 0f 1e fa          	endbr64 
    10f4:	68 0c 00 00 00       	push   $0xc
    10f9:	f2 e9 21 ff ff ff    	bnd jmp 1020 <_init+0x20>
    10ff:	90                   	nop

Disassembly of section .plt.got:

0000000000001100 <__cxa_finalize@plt>:
    1100:	f3 0f 1e fa          	endbr64 
    1104:	f2 ff 25 c5 4e 00 00 	bnd jmp *0x4ec5(%rip)        # 5fd0 <__cxa_finalize@GLIBC_2.2.5>
    110b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

Disassembly of section .plt.sec:

0000000000001110 <_ZSt17__throw_bad_allocv@plt>:
    1110:	f3 0f 1e fa          	endbr64 
    1114:	f2 ff 25 4d 4e 00 00 	bnd jmp *0x4e4d(%rip)        # 5f68 <_ZSt17__throw_bad_allocv@GLIBCXX_3.4>
    111b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001120 <_ZSt20__throw_length_errorPKc@plt>:
    1120:	f3 0f 1e fa          	endbr64 
    1124:	f2 ff 25 45 4e 00 00 	bnd jmp *0x4e45(%rip)        # 5f70 <_ZSt20__throw_length_errorPKc@GLIBCXX_3.4>
    112b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001130 <_ZNSolsEf@plt>:
    1130:	f3 0f 1e fa          	endbr64 
    1134:	f2 ff 25 3d 4e 00 00 	bnd jmp *0x4e3d(%rip)        # 5f78 <_ZNSolsEf@GLIBCXX_3.4>
    113b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001140 <_ZSt28__throw_bad_array_new_lengthv@plt>:
    1140:	f3 0f 1e fa          	endbr64 
    1144:	f2 ff 25 35 4e 00 00 	bnd jmp *0x4e35(%rip)        # 5f80 <_ZSt28__throw_bad_array_new_lengthv@GLIBCXX_3.4.29>
    114b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001150 <__cxa_atexit@plt>:
    1150:	f3 0f 1e fa          	endbr64 
    1154:	f2 ff 25 2d 4e 00 00 	bnd jmp *0x4e2d(%rip)        # 5f88 <__cxa_atexit@GLIBC_2.2.5>
    115b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001160 <_ZdlPv@plt>:
    1160:	f3 0f 1e fa          	endbr64 
    1164:	f2 ff 25 25 4e 00 00 	bnd jmp *0x4e25(%rip)        # 5f90 <_ZdlPv@GLIBCXX_3.4>
    116b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001170 <_Znwm@plt>:
    1170:	f3 0f 1e fa          	endbr64 
    1174:	f2 ff 25 1d 4e 00 00 	bnd jmp *0x4e1d(%rip)        # 5f98 <_Znwm@GLIBCXX_3.4>
    117b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001180 <_ZdlPvm@plt>:
    1180:	f3 0f 1e fa          	endbr64 
    1184:	f2 ff 25 15 4e 00 00 	bnd jmp *0x4e15(%rip)        # 5fa0 <_ZdlPvm@CXXABI_1.3.9>
    118b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001190 <__stack_chk_fail@plt>:
    1190:	f3 0f 1e fa          	endbr64 
    1194:	f2 ff 25 0d 4e 00 00 	bnd jmp *0x4e0d(%rip)        # 5fa8 <__stack_chk_fail@GLIBC_2.4>
    119b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000011a0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@plt>:
    11a0:	f3 0f 1e fa          	endbr64 
    11a4:	f2 ff 25 05 4e 00 00 	bnd jmp *0x4e05(%rip)        # 5fb0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@GLIBCXX_3.4>
    11ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000011b0 <_ZNSt8ios_base4InitC1Ev@plt>:
    11b0:	f3 0f 1e fa          	endbr64 
    11b4:	f2 ff 25 fd 4d 00 00 	bnd jmp *0x4dfd(%rip)        # 5fb8 <_ZNSt8ios_base4InitC1Ev@GLIBCXX_3.4>
    11bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000011c0 <memmove@plt>:
    11c0:	f3 0f 1e fa          	endbr64 
    11c4:	f2 ff 25 f5 4d 00 00 	bnd jmp *0x4df5(%rip)        # 5fc0 <memmove@GLIBC_2.2.5>
    11cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000011d0 <_Unwind_Resume@plt>:
    11d0:	f3 0f 1e fa          	endbr64 
    11d4:	f2 ff 25 ed 4d 00 00 	bnd jmp *0x4ded(%rip)        # 5fc8 <_Unwind_Resume@GCC_3.0>
    11db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

Disassembly of section .text:

00000000000011e0 <_start>:
    11e0:	f3 0f 1e fa          	endbr64 
    11e4:	31 ed                	xor    %ebp,%ebp
    11e6:	49 89 d1             	mov    %rdx,%r9
    11e9:	5e                   	pop    %rsi
    11ea:	48 89 e2             	mov    %rsp,%rdx
    11ed:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    11f1:	50                   	push   %rax
    11f2:	54                   	push   %rsp
    11f3:	45 31 c0             	xor    %r8d,%r8d
    11f6:	31 c9                	xor    %ecx,%ecx
    11f8:	48 8d 3d 0d 01 00 00 	lea    0x10d(%rip),%rdi        # 130c <main>
    11ff:	ff 15 d3 4d 00 00    	call   *0x4dd3(%rip)        # 5fd8 <__libc_start_main@GLIBC_2.34>
    1205:	f4                   	hlt    
    1206:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    120d:	00 00 00 

0000000000001210 <deregister_tm_clones>:
    1210:	48 8d 3d 01 4e 00 00 	lea    0x4e01(%rip),%rdi        # 6018 <__TMC_END__>
    1217:	48 8d 05 fa 4d 00 00 	lea    0x4dfa(%rip),%rax        # 6018 <__TMC_END__>
    121e:	48 39 f8             	cmp    %rdi,%rax
    1221:	74 15                	je     1238 <deregister_tm_clones+0x28>
    1223:	48 8b 05 b6 4d 00 00 	mov    0x4db6(%rip),%rax        # 5fe0 <_ITM_deregisterTMCloneTable@Base>
    122a:	48 85 c0             	test   %rax,%rax
    122d:	74 09                	je     1238 <deregister_tm_clones+0x28>
    122f:	ff e0                	jmp    *%rax
    1231:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    1238:	c3                   	ret    
    1239:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001240 <register_tm_clones>:
    1240:	48 8d 3d d1 4d 00 00 	lea    0x4dd1(%rip),%rdi        # 6018 <__TMC_END__>
    1247:	48 8d 35 ca 4d 00 00 	lea    0x4dca(%rip),%rsi        # 6018 <__TMC_END__>
    124e:	48 29 fe             	sub    %rdi,%rsi
    1251:	48 89 f0             	mov    %rsi,%rax
    1254:	48 c1 ee 3f          	shr    $0x3f,%rsi
    1258:	48 c1 f8 03          	sar    $0x3,%rax
    125c:	48 01 c6             	add    %rax,%rsi
    125f:	48 d1 fe             	sar    %rsi
    1262:	74 14                	je     1278 <register_tm_clones+0x38>
    1264:	48 8b 05 85 4d 00 00 	mov    0x4d85(%rip),%rax        # 5ff0 <_ITM_registerTMCloneTable@Base>
    126b:	48 85 c0             	test   %rax,%rax
    126e:	74 08                	je     1278 <register_tm_clones+0x38>
    1270:	ff e0                	jmp    *%rax
    1272:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    1278:	c3                   	ret    
    1279:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001280 <__do_global_dtors_aux>:
    1280:	f3 0f 1e fa          	endbr64 
    1284:	80 3d c5 4e 00 00 00 	cmpb   $0x0,0x4ec5(%rip)        # 6150 <completed.0>
    128b:	75 2b                	jne    12b8 <__do_global_dtors_aux+0x38>
    128d:	55                   	push   %rbp
    128e:	48 83 3d 3a 4d 00 00 	cmpq   $0x0,0x4d3a(%rip)        # 5fd0 <__cxa_finalize@GLIBC_2.2.5>
    1295:	00 
    1296:	48 89 e5             	mov    %rsp,%rbp
    1299:	74 0c                	je     12a7 <__do_global_dtors_aux+0x27>
    129b:	48 8b 3d 66 4d 00 00 	mov    0x4d66(%rip),%rdi        # 6008 <__dso_handle>
    12a2:	e8 59 fe ff ff       	call   1100 <__cxa_finalize@plt>
    12a7:	e8 64 ff ff ff       	call   1210 <deregister_tm_clones>
    12ac:	c6 05 9d 4e 00 00 01 	movb   $0x1,0x4e9d(%rip)        # 6150 <completed.0>
    12b3:	5d                   	pop    %rbp
    12b4:	c3                   	ret    
    12b5:	0f 1f 00             	nopl   (%rax)
    12b8:	c3                   	ret    
    12b9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000012c0 <frame_dummy>:
    12c0:	f3 0f 1e fa          	endbr64 
    12c4:	e9 77 ff ff ff       	jmp    1240 <register_tm_clones>

00000000000012c9 <_Zpl6VectorRKS_>:

private:
  std::vector<float> data_;
};

Vector operator+(Vector lhs, const Vector &rhs) { return lhs += rhs; }
    12c9:	f3 0f 1e fa          	endbr64 
    12cd:	55                   	push   %rbp
    12ce:	48 89 e5             	mov    %rsp,%rbp
    12d1:	48 83 ec 20          	sub    $0x20,%rsp
    12d5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    12d9:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    12dd:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    12e1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    12e5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    12e9:	48 89 d6             	mov    %rdx,%rsi
    12ec:	48 89 c7             	mov    %rax,%rdi
    12ef:	e8 86 04 00 00       	call   177a <_ZN6VectorpLERKS_>
    12f4:	48 89 c2             	mov    %rax,%rdx
    12f7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    12fb:	48 89 d6             	mov    %rdx,%rsi
    12fe:	48 89 c7             	mov    %rax,%rdi
    1301:	e8 f0 04 00 00       	call   17f6 <_ZN6VectorC1ERKS_>
    1306:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    130a:	c9                   	leave  
    130b:	c3                   	ret    

000000000000130c <main>:
#include "vector.h"
#include <iostream>

int main() {
    130c:	f3 0f 1e fa          	endbr64 
    1310:	55                   	push   %rbp
    1311:	48 89 e5             	mov    %rsp,%rbp
    1314:	41 55                	push   %r13
    1316:	41 54                	push   %r12
    1318:	53                   	push   %rbx
    1319:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
    1320:	64 48 8b 0c 25 28 00 	mov    %fs:0x28,%rcx
    1327:	00 00 
    1329:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
    132d:	31 c9                	xor    %ecx,%ecx
  Vector v1{1.0f, 2.0f, 3.0f};
    132f:	f3 0f 10 05 05 1d 00 	movss  0x1d05(%rip),%xmm0        # 303c <_ZNSt6ranges6__cust4dataE+0x37>
    1336:	00 
    1337:	f3 0f 11 45 cc       	movss  %xmm0,-0x34(%rbp)
    133c:	f3 0f 10 05 fc 1c 00 	movss  0x1cfc(%rip),%xmm0        # 3040 <_ZNSt6ranges6__cust4dataE+0x3b>
    1343:	00 
    1344:	f3 0f 11 45 d0       	movss  %xmm0,-0x30(%rbp)
    1349:	f3 0f 10 05 f3 1c 00 	movss  0x1cf3(%rip),%xmm0        # 3044 <_ZNSt6ranges6__cust4dataE+0x3f>
    1350:	00 
    1351:	f3 0f 11 45 d4       	movss  %xmm0,-0x2c(%rbp)
    1356:	48 8d 4d cc          	lea    -0x34(%rbp),%rcx
    135a:	48 89 c8             	mov    %rcx,%rax
    135d:	ba 03 00 00 00       	mov    $0x3,%edx
    1362:	48 89 c1             	mov    %rax,%rcx
    1365:	48 89 d3             	mov    %rdx,%rbx
    1368:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    136f:	48 89 ce             	mov    %rcx,%rsi
    1372:	48 89 c7             	mov    %rax,%rdi
    1375:	e8 aa 02 00 00       	call   1624 <_ZN6VectorC1ESt16initializer_listIfE>
  Vector v2{4.0f, 5.0f, 6.0f};
    137a:	f3 0f 10 05 c6 1c 00 	movss  0x1cc6(%rip),%xmm0        # 3048 <_ZNSt6ranges6__cust4dataE+0x43>
    1381:	00 
    1382:	f3 0f 11 45 cc       	movss  %xmm0,-0x34(%rbp)
    1387:	f3 0f 10 05 bd 1c 00 	movss  0x1cbd(%rip),%xmm0        # 304c <_ZNSt6ranges6__cust4dataE+0x47>
    138e:	00 
    138f:	f3 0f 11 45 d0       	movss  %xmm0,-0x30(%rbp)
    1394:	f3 0f 10 05 b4 1c 00 	movss  0x1cb4(%rip),%xmm0        # 3050 <_ZNSt6ranges6__cust4dataE+0x4b>
    139b:	00 
    139c:	f3 0f 11 45 d4       	movss  %xmm0,-0x2c(%rbp)
    13a1:	48 8d 45 cc          	lea    -0x34(%rbp),%rax
    13a5:	49 89 c4             	mov    %rax,%r12
    13a8:	41 bd 03 00 00 00    	mov    $0x3,%r13d
    13ae:	4c 89 e1             	mov    %r12,%rcx
    13b1:	4c 89 eb             	mov    %r13,%rbx
    13b4:	4c 89 e0             	mov    %r12,%rax
    13b7:	4c 89 ea             	mov    %r13,%rdx
    13ba:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    13c1:	48 89 ce             	mov    %rcx,%rsi
    13c4:	48 89 c7             	mov    %rax,%rdi
    13c7:	e8 58 02 00 00       	call   1624 <_ZN6VectorC1ESt16initializer_listIfE>
  for (const auto &elem : (v1 + v2).data()) {
    13cc:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
    13d3:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    13d7:	48 89 d6             	mov    %rdx,%rsi
    13da:	48 89 c7             	mov    %rax,%rdi
    13dd:	e8 14 04 00 00       	call   17f6 <_ZN6VectorC1ERKS_>
    13e2:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    13e6:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    13ed:	48 8d 4d 90          	lea    -0x70(%rbp),%rcx
    13f1:	48 89 ce             	mov    %rcx,%rsi
    13f4:	48 89 c7             	mov    %rax,%rdi
    13f7:	e8 cd fe ff ff       	call   12c9 <_Zpl6VectorRKS_>
    13fc:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1400:	48 89 c7             	mov    %rax,%rdi
    1403:	e8 22 03 00 00       	call   172a <_ZNK6Vector4dataEv>
    1408:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
    140f:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
    1416:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    141d:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
    1424:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1428:	48 89 c7             	mov    %rax,%rdi
    142b:	e8 f0 03 00 00       	call   1820 <_ZN6VectorD1Ev>
    1430:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1434:	48 89 c7             	mov    %rax,%rdi
    1437:	e8 e4 03 00 00       	call   1820 <_ZN6VectorD1Ev>
    143c:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    1443:	48 89 c7             	mov    %rax,%rdi
    1446:	e8 f5 03 00 00       	call   1840 <_ZNKSt4spanIKfLm18446744073709551615EE5beginEv>
    144b:	48 89 45 90          	mov    %rax,-0x70(%rbp)
    144f:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    1456:	48 89 c7             	mov    %rax,%rdi
    1459:	e8 2e 04 00 00       	call   188c <_ZNKSt4spanIKfLm18446744073709551615EE3endEv>
    145e:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    1462:	eb 48                	jmp    14ac <main+0x1a0>
    1464:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1468:	48 89 c7             	mov    %rax,%rdi
    146b:	e8 02 05 00 00       	call   1972 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt4spanIS1_Lm18446744073709551615EEEdeEv>
    1470:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
    std::cout << elem << ' ';
    1477:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    147e:	8b 00                	mov    (%rax),%eax
    1480:	66 0f 6e c0          	movd   %eax,%xmm0
    1484:	48 8d 05 b5 4b 00 00 	lea    0x4bb5(%rip),%rax        # 6040 <_ZSt4cout@GLIBCXX_3.4>
    148b:	48 89 c7             	mov    %rax,%rdi
    148e:	e8 9d fc ff ff       	call   1130 <_ZNSolsEf@plt>
    1493:	be 20 00 00 00       	mov    $0x20,%esi
    1498:	48 89 c7             	mov    %rax,%rdi
    149b:	e8 00 fd ff ff       	call   11a0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@plt>
  for (const auto &elem : (v1 + v2).data()) {
    14a0:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    14a4:	48 89 c7             	mov    %rax,%rdi
    14a7:	e8 a2 04 00 00       	call   194e <_ZN9__gnu_cxx17__normal_iteratorIPKfSt4spanIS1_Lm18446744073709551615EEEppEv>
    14ac:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    14b0:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    14b4:	48 89 d6             	mov    %rdx,%rsi
    14b7:	48 89 c7             	mov    %rax,%rdi
    14ba:	e8 4f 04 00 00       	call   190e <_ZN9__gnu_cxxeqIPKfSt4spanIS1_Lm18446744073709551615EEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
    14bf:	83 f0 01             	xor    $0x1,%eax
    14c2:	84 c0                	test   %al,%al
    14c4:	75 9e                	jne    1464 <main+0x158>
  }
  std::cout << '\n';
    14c6:	be 0a 00 00 00       	mov    $0xa,%esi
    14cb:	48 8d 05 6e 4b 00 00 	lea    0x4b6e(%rip),%rax        # 6040 <_ZSt4cout@GLIBCXX_3.4>
    14d2:	48 89 c7             	mov    %rax,%rdi
    14d5:	e8 c6 fc ff ff       	call   11a0 <_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_c@plt>
  return 0;
    14da:	bb 00 00 00 00       	mov    $0x0,%ebx
    14df:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    14e6:	48 89 c7             	mov    %rax,%rdi
    14e9:	e8 32 03 00 00       	call   1820 <_ZN6VectorD1Ev>
    14ee:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    14f5:	48 89 c7             	mov    %rax,%rdi
    14f8:	e8 23 03 00 00       	call   1820 <_ZN6VectorD1Ev>
    14fd:	89 d8                	mov    %ebx,%eax
    14ff:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    1503:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
    150a:	00 00 
    150c:	74 55                	je     1563 <main+0x257>
    150e:	eb 4e                	jmp    155e <main+0x252>
    1510:	f3 0f 1e fa          	endbr64 
  for (const auto &elem : (v1 + v2).data()) {
    1514:	48 89 c3             	mov    %rax,%rbx
    1517:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    151b:	48 89 c7             	mov    %rax,%rdi
    151e:	e8 fd 02 00 00       	call   1820 <_ZN6VectorD1Ev>
    1523:	eb 07                	jmp    152c <main+0x220>
    1525:	f3 0f 1e fa          	endbr64 
    1529:	48 89 c3             	mov    %rax,%rbx
    152c:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1533:	48 89 c7             	mov    %rax,%rdi
    1536:	e8 e5 02 00 00       	call   1820 <_ZN6VectorD1Ev>
    153b:	eb 07                	jmp    1544 <main+0x238>
    153d:	f3 0f 1e fa          	endbr64 
    1541:	48 89 c3             	mov    %rax,%rbx
    1544:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    154b:	48 89 c7             	mov    %rax,%rdi
    154e:	e8 cd 02 00 00       	call   1820 <_ZN6VectorD1Ev>
    1553:	48 89 d8             	mov    %rbx,%rax
    1556:	48 89 c7             	mov    %rax,%rdi
    1559:	e8 72 fc ff ff       	call   11d0 <_Unwind_Resume@plt>
    155e:	e8 2d fc ff ff       	call   1190 <__stack_chk_fail@plt>
    1563:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
    156a:	5b                   	pop    %rbx
    156b:	41 5c                	pop    %r12
    156d:	41 5d                	pop    %r13
    156f:	5d                   	pop    %rbp
    1570:	c3                   	ret    

0000000000001571 <_Z41__static_initialization_and_destruction_0ii>:
    1571:	f3 0f 1e fa          	endbr64 
    1575:	55                   	push   %rbp
    1576:	48 89 e5             	mov    %rsp,%rbp
    1579:	48 83 ec 10          	sub    $0x10,%rsp
    157d:	89 7d fc             	mov    %edi,-0x4(%rbp)
    1580:	89 75 f8             	mov    %esi,-0x8(%rbp)
    1583:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
    1587:	75 3b                	jne    15c4 <_Z41__static_initialization_and_destruction_0ii+0x53>
    1589:	81 7d f8 ff ff 00 00 	cmpl   $0xffff,-0x8(%rbp)
    1590:	75 32                	jne    15c4 <_Z41__static_initialization_and_destruction_0ii+0x53>
  extern wostream wclog;	/// Linked to standard error (buffered)
#endif
  ///@}

  // For construction of filebuffers for cout, cin, cerr, clog et. al.
  static ios_base::Init __ioinit;
    1592:	48 8d 05 b8 4b 00 00 	lea    0x4bb8(%rip),%rax        # 6151 <_ZStL8__ioinit>
    1599:	48 89 c7             	mov    %rax,%rdi
    159c:	e8 0f fc ff ff       	call   11b0 <_ZNSt8ios_base4InitC1Ev@plt>
    15a1:	48 8d 05 60 4a 00 00 	lea    0x4a60(%rip),%rax        # 6008 <__dso_handle>
    15a8:	48 89 c2             	mov    %rax,%rdx
    15ab:	48 8d 05 9f 4b 00 00 	lea    0x4b9f(%rip),%rax        # 6151 <_ZStL8__ioinit>
    15b2:	48 89 c6             	mov    %rax,%rsi
    15b5:	48 8b 05 3c 4a 00 00 	mov    0x4a3c(%rip),%rax        # 5ff8 <_ZNSt8ios_base4InitD1Ev@GLIBCXX_3.4>
    15bc:	48 89 c7             	mov    %rax,%rdi
    15bf:	e8 8c fb ff ff       	call   1150 <__cxa_atexit@plt>
    15c4:	90                   	nop
    15c5:	c9                   	leave  
    15c6:	c3                   	ret    

00000000000015c7 <_GLOBAL__sub_I__Zpl6VectorRKS_>:
    15c7:	f3 0f 1e fa          	endbr64 
    15cb:	55                   	push   %rbp
    15cc:	48 89 e5             	mov    %rsp,%rbp
    15cf:	be ff ff 00 00       	mov    $0xffff,%esi
    15d4:	bf 01 00 00 00       	mov    $0x1,%edi
    15d9:	e8 93 ff ff ff       	call   1571 <_Z41__static_initialization_and_destruction_0ii>
    15de:	5d                   	pop    %rbp
    15df:	c3                   	ret    

00000000000015e0 <_ZSt21is_constant_evaluatedv>:
#define __cpp_lib_is_constant_evaluated 201811L

  /// Returns true only when called during constant evaluation.
  constexpr inline bool
  is_constant_evaluated() noexcept
  { return __builtin_is_constant_evaluated(); }
    15e0:	f3 0f 1e fa          	endbr64 
    15e4:	55                   	push   %rbp
    15e5:	48 89 e5             	mov    %rsp,%rbp
    15e8:	b8 00 00 00 00       	mov    $0x0,%eax
    15ed:	5d                   	pop    %rbp
    15ee:	c3                   	ret    
    15ef:	90                   	nop

00000000000015f0 <_ZNSt8__detail16__extent_storageILm18446744073709551615EEC1Em>:
    template<>
      class __extent_storage<dynamic_extent>
      {
      public:
	constexpr
	__extent_storage(size_t __extent) noexcept
    15f0:	f3 0f 1e fa          	endbr64 
    15f4:	55                   	push   %rbp
    15f5:	48 89 e5             	mov    %rsp,%rbp
    15f8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    15fc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _M_extent_value(__extent)
    1600:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1604:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    1608:	48 89 10             	mov    %rdx,(%rax)
	{ }
    160b:	90                   	nop
    160c:	5d                   	pop    %rbp
    160d:	c3                   	ret    

000000000000160e <_ZNKSt8__detail16__extent_storageILm18446744073709551615EE9_M_extentEv>:

	constexpr size_t
	_M_extent() const noexcept
    160e:	f3 0f 1e fa          	endbr64 
    1612:	55                   	push   %rbp
    1613:	48 89 e5             	mov    %rsp,%rbp
    1616:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	{ return this->_M_extent_value; }
    161a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    161e:	48 8b 00             	mov    (%rax),%rax
    1621:	5d                   	pop    %rbp
    1622:	c3                   	ret    
    1623:	90                   	nop

0000000000001624 <_ZN6VectorC1ESt16initializer_listIfE>:
  Vector(std::initializer_list<float> init) : data_(std::move(init)) {}
    1624:	f3 0f 1e fa          	endbr64 
    1628:	55                   	push   %rbp
    1629:	48 89 e5             	mov    %rsp,%rbp
    162c:	53                   	push   %rbx
    162d:	48 83 ec 38          	sub    $0x38,%rsp
    1631:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    1635:	48 89 d1             	mov    %rdx,%rcx
    1638:	48 89 f0             	mov    %rsi,%rax
    163b:	48 89 fa             	mov    %rdi,%rdx
    163e:	48 89 ca             	mov    %rcx,%rdx
    1641:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    1645:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    1649:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1650:	00 00 
    1652:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    1656:	31 c0                	xor    %eax,%eax
    1658:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
    165c:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
    1660:	48 89 c7             	mov    %rax,%rdi
    1663:	e8 32 03 00 00       	call   199a <_ZNSaIfEC1Ev>
    1668:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    166c:	48 89 c7             	mov    %rax,%rdi
    166f:	e8 13 03 00 00       	call   1987 <_ZSt4moveIRSt16initializer_listIfEEONSt16remove_referenceIT_E4typeEOS4_>
    1674:	48 8d 4d e7          	lea    -0x19(%rbp),%rcx
    1678:	48 8b 10             	mov    (%rax),%rdx
    167b:	48 8b 40 08          	mov    0x8(%rax),%rax
    167f:	48 89 d6             	mov    %rdx,%rsi
    1682:	48 89 c2             	mov    %rax,%rdx
    1685:	48 89 df             	mov    %rbx,%rdi
    1688:	e8 3d 03 00 00       	call   19ca <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>
    168d:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
    1691:	48 89 c7             	mov    %rax,%rdi
    1694:	e8 21 03 00 00       	call   19ba <_ZNSaIfED1Ev>
    1699:	90                   	nop
    169a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    169e:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    16a5:	00 00 
    16a7:	74 25                	je     16ce <_ZN6VectorC1ESt16initializer_listIfE+0xaa>
    16a9:	eb 1e                	jmp    16c9 <_ZN6VectorC1ESt16initializer_listIfE+0xa5>
    16ab:	f3 0f 1e fa          	endbr64 
    16af:	48 89 c3             	mov    %rax,%rbx
    16b2:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
    16b6:	48 89 c7             	mov    %rax,%rdi
    16b9:	e8 fc 02 00 00       	call   19ba <_ZNSaIfED1Ev>
    16be:	48 89 d8             	mov    %rbx,%rax
    16c1:	48 89 c7             	mov    %rax,%rdi
    16c4:	e8 07 fb ff ff       	call   11d0 <_Unwind_Resume@plt>
    16c9:	e8 c2 fa ff ff       	call   1190 <__stack_chk_fail@plt>
    16ce:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    16d2:	c9                   	leave  
    16d3:	c3                   	ret    

00000000000016d4 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current - __n); }

      _GLIBCXX20_CONSTEXPR
      const _Iterator&
      base() const _GLIBCXX_NOEXCEPT
    16d4:	f3 0f 1e fa          	endbr64 
    16d8:	55                   	push   %rbp
    16d9:	48 89 e5             	mov    %rsp,%rbp
    16dc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
    16e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    16e4:	5d                   	pop    %rbp
    16e5:	c3                   	ret    

00000000000016e6 <_ZNKSt6ranges13__cust_access5_DataclIRKSt6vectorIfSaIfEEEEDaOT_>:

    public:
      template<__maybe_borrowed_range _Tp>
	requires __member_data<_Tp> || __begin_data<_Tp>
	constexpr auto
	operator()(_Tp&& __t) const noexcept(_S_noexcept<_Tp>())
    16e6:	f3 0f 1e fa          	endbr64 
    16ea:	55                   	push   %rbp
    16eb:	48 89 e5             	mov    %rsp,%rbp
    16ee:	48 83 ec 10          	sub    $0x10,%rsp
    16f2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    16f6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{
	  if constexpr (__member_data<_Tp>)
	    return __t.data();
    16fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    16fe:	48 89 c7             	mov    %rax,%rdi
    1701:	e8 6c 04 00 00       	call   1b72 <_ZNKSt6vectorIfSaIfEE4dataEv>
	  else
	    return std::to_address(_Begin{}(__t));
	}
    1706:	c9                   	leave  
    1707:	c3                   	ret    

0000000000001708 <_ZNKSt6ranges13__cust_access5_SizeclIRKSt6vectorIfSaIfEEEEDaOT_>:
	operator()(_Tp&& __t) const noexcept(_S_noexcept<_Tp&>())
    1708:	f3 0f 1e fa          	endbr64 
    170c:	55                   	push   %rbp
    170d:	48 89 e5             	mov    %rsp,%rbp
    1710:	48 83 ec 10          	sub    $0x10,%rsp
    1714:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    1718:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	    return __t.size();
    171c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    1720:	48 89 c7             	mov    %rax,%rdi
    1723:	e8 72 04 00 00       	call   1b9a <_ZNKSt6vectorIfSaIfEE4sizeEv>
	}
    1728:	c9                   	leave  
    1729:	c3                   	ret    

000000000000172a <_ZNK6Vector4dataEv>:
  std::span<const float> data() const { return data_; }
    172a:	f3 0f 1e fa          	endbr64 
    172e:	55                   	push   %rbp
    172f:	48 89 e5             	mov    %rsp,%rbp
    1732:	48 83 ec 30          	sub    $0x30,%rsp
    1736:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    173a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1741:	00 00 
    1743:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    1747:	31 c0                	xor    %eax,%eax
    1749:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    174d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1751:	48 89 d6             	mov    %rdx,%rsi
    1754:	48 89 c7             	mov    %rax,%rdi
    1757:	e8 ac 04 00 00       	call   1c08 <_ZNSt4spanIKfLm18446744073709551615EEC1IRKSt6vectorIfSaIfEEEEOT_>
    175c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    1760:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    1764:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    1768:	64 48 2b 0c 25 28 00 	sub    %fs:0x28,%rcx
    176f:	00 00 
    1771:	74 05                	je     1778 <_ZNK6Vector4dataEv+0x4e>
    1773:	e8 18 fa ff ff       	call   1190 <__stack_chk_fail@plt>
    1778:	c9                   	leave  
    1779:	c3                   	ret    

000000000000177a <_ZN6VectorpLERKS_>:
  Vector &operator+=(const Vector &rhs) {
    177a:	f3 0f 1e fa          	endbr64 
    177e:	55                   	push   %rbp
    177f:	48 89 e5             	mov    %rsp,%rbp
    1782:	48 83 ec 30          	sub    $0x30,%rsp
    1786:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    178a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    for (size_t i = 0; i < data_.size(); ++i) {
    178e:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
    1795:	00 
    1796:	eb 41                	jmp    17d9 <_ZN6VectorpLERKS_+0x5f>
      data_[i] += rhs.data_[i];
    1798:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    179c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    17a0:	48 89 d6             	mov    %rdx,%rsi
    17a3:	48 89 c7             	mov    %rax,%rdi
    17a6:	e8 e1 04 00 00       	call   1c8c <_ZNKSt6vectorIfSaIfEEixEm>
    17ab:	f3 0f 10 08          	movss  (%rax),%xmm1
    17af:	f3 0f 11 4d dc       	movss  %xmm1,-0x24(%rbp)
    17b4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    17b8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    17bc:	48 89 d6             	mov    %rdx,%rsi
    17bf:	48 89 c7             	mov    %rax,%rdi
    17c2:	e8 a1 04 00 00       	call   1c68 <_ZNSt6vectorIfSaIfEEixEm>
    17c7:	f3 0f 10 00          	movss  (%rax),%xmm0
    17cb:	f3 0f 58 45 dc       	addss  -0x24(%rbp),%xmm0
    17d0:	f3 0f 11 00          	movss  %xmm0,(%rax)
    for (size_t i = 0; i < data_.size(); ++i) {
    17d4:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
    17d9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    17dd:	48 89 c7             	mov    %rax,%rdi
    17e0:	e8 b5 03 00 00       	call   1b9a <_ZNKSt6vectorIfSaIfEE4sizeEv>
    17e5:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
    17e9:	0f 92 c0             	setb   %al
    17ec:	84 c0                	test   %al,%al
    17ee:	75 a8                	jne    1798 <_ZN6VectorpLERKS_+0x1e>
    return *this;
    17f0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  }
    17f4:	c9                   	leave  
    17f5:	c3                   	ret    

00000000000017f6 <_ZN6VectorC1ERKS_>:
class Vector {
    17f6:	f3 0f 1e fa          	endbr64 
    17fa:	55                   	push   %rbp
    17fb:	48 89 e5             	mov    %rsp,%rbp
    17fe:	48 83 ec 10          	sub    $0x10,%rsp
    1802:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    1806:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    180a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    180e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    1812:	48 89 d6             	mov    %rdx,%rsi
    1815:	48 89 c7             	mov    %rax,%rdi
    1818:	e8 93 04 00 00       	call   1cb0 <_ZNSt6vectorIfSaIfEEC1ERKS1_>
    181d:	90                   	nop
    181e:	c9                   	leave  
    181f:	c3                   	ret    

0000000000001820 <_ZN6VectorD1Ev>:
    1820:	f3 0f 1e fa          	endbr64 
    1824:	55                   	push   %rbp
    1825:	48 89 e5             	mov    %rsp,%rbp
    1828:	48 83 ec 10          	sub    $0x10,%rsp
    182c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    1830:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1834:	48 89 c7             	mov    %rax,%rdi
    1837:	e8 40 02 00 00       	call   1a7c <_ZNSt6vectorIfSaIfEED1Ev>
    183c:	90                   	nop
    183d:	c9                   	leave  
    183e:	c3                   	ret    
    183f:	90                   	nop

0000000000001840 <_ZNKSt4spanIKfLm18446744073709551615EE5beginEv>:
      { return this->_M_ptr; }

      // iterator support

      constexpr iterator
      begin() const noexcept
    1840:	f3 0f 1e fa          	endbr64 
    1844:	55                   	push   %rbp
    1845:	48 89 e5             	mov    %rsp,%rbp
    1848:	48 83 ec 20          	sub    $0x20,%rsp
    184c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    1850:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1857:	00 00 
    1859:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    185d:	31 c0                	xor    %eax,%eax
      { return iterator(this->_M_ptr); }
    185f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    1863:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
    1867:	48 89 d6             	mov    %rdx,%rsi
    186a:	48 89 c7             	mov    %rax,%rdi
    186d:	e8 5e 05 00 00       	call   1dd0 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt4spanIS1_Lm18446744073709551615EEEC1ERKS2_>
    1872:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    1876:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    187a:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
    1881:	00 00 
    1883:	74 05                	je     188a <_ZNKSt4spanIKfLm18446744073709551615EE5beginEv+0x4a>
    1885:	e8 06 f9 ff ff       	call   1190 <__stack_chk_fail@plt>
    188a:	c9                   	leave  
    188b:	c3                   	ret    

000000000000188c <_ZNKSt4spanIKfLm18446744073709551615EE3endEv>:

      constexpr iterator
      end() const noexcept
    188c:	f3 0f 1e fa          	endbr64 
    1890:	55                   	push   %rbp
    1891:	48 89 e5             	mov    %rsp,%rbp
    1894:	53                   	push   %rbx
    1895:	48 83 ec 38          	sub    $0x38,%rsp
    1899:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    189d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    18a4:	00 00 
    18a6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    18aa:	31 c0                	xor    %eax,%eax
      { return iterator(this->_M_ptr + this->size()); }
    18ac:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    18b0:	48 8b 18             	mov    (%rax),%rbx
    18b3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    18b7:	48 89 c7             	mov    %rax,%rdi
    18ba:	e8 33 05 00 00       	call   1df2 <_ZNKSt4spanIKfLm18446744073709551615EE4sizeEv>
    18bf:	48 c1 e0 02          	shl    $0x2,%rax
    18c3:	48 01 d8             	add    %rbx,%rax
    18c6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    18ca:	48 8d 55 d8          	lea    -0x28(%rbp),%rdx
    18ce:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    18d2:	48 89 d6             	mov    %rdx,%rsi
    18d5:	48 89 c7             	mov    %rax,%rdi
    18d8:	e8 f3 04 00 00       	call   1dd0 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt4spanIS1_Lm18446744073709551615EEEC1ERKS2_>
    18dd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    18e1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    18e5:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
    18ec:	00 00 
    18ee:	74 05                	je     18f5 <_ZNKSt4spanIKfLm18446744073709551615EE3endEv+0x69>
    18f0:	e8 9b f8 ff ff       	call   1190 <__stack_chk_fail@plt>
    18f5:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    18f9:	c9                   	leave  
    18fa:	c3                   	ret    
    18fb:	90                   	nop

00000000000018fc <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt4spanIS1_Lm18446744073709551615EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
    18fc:	f3 0f 1e fa          	endbr64 
    1900:	55                   	push   %rbp
    1901:	48 89 e5             	mov    %rsp,%rbp
    1904:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
    1908:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    190c:	5d                   	pop    %rbp
    190d:	c3                   	ret    

000000000000190e <_ZN9__gnu_cxxeqIPKfSt4spanIS1_Lm18446744073709551615EEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    noexcept(noexcept(std::__detail::__synth3way(__lhs.base(), __rhs.base())))
    { return std::__detail::__synth3way(__lhs.base(), __rhs.base()); }

  template<typename _Iterator, typename _Container>
    constexpr bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
    190e:	f3 0f 1e fa          	endbr64 
    1912:	55                   	push   %rbp
    1913:	48 89 e5             	mov    %rsp,%rbp
    1916:	53                   	push   %rbx
    1917:	48 83 ec 18          	sub    $0x18,%rsp
    191b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    191f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept(noexcept(__lhs.base() == __rhs.base()))
    requires requires {
      { __lhs.base() == __rhs.base() } -> std::convertible_to<bool>;
    }
    { return __lhs.base() == __rhs.base(); }
    1923:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    1927:	48 89 c7             	mov    %rax,%rdi
    192a:	e8 cd ff ff ff       	call   18fc <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt4spanIS1_Lm18446744073709551615EEE4baseEv>
    192f:	48 8b 18             	mov    (%rax),%rbx
    1932:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    1936:	48 89 c7             	mov    %rax,%rdi
    1939:	e8 be ff ff ff       	call   18fc <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt4spanIS1_Lm18446744073709551615EEE4baseEv>
    193e:	48 8b 00             	mov    (%rax),%rax
    1941:	48 39 c3             	cmp    %rax,%rbx
    1944:	0f 94 c0             	sete   %al
    1947:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    194b:	c9                   	leave  
    194c:	c3                   	ret    
    194d:	90                   	nop

000000000000194e <_ZN9__gnu_cxx17__normal_iteratorIPKfSt4spanIS1_Lm18446744073709551615EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
    194e:	f3 0f 1e fa          	endbr64 
    1952:	55                   	push   %rbp
    1953:	48 89 e5             	mov    %rsp,%rbp
    1956:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	++_M_current;
    195a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    195e:	48 8b 00             	mov    (%rax),%rax
    1961:	48 8d 50 04          	lea    0x4(%rax),%rdx
    1965:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1969:	48 89 10             	mov    %rdx,(%rax)
	return *this;
    196c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
    1970:	5d                   	pop    %rbp
    1971:	c3                   	ret    

0000000000001972 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt4spanIS1_Lm18446744073709551615EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
    1972:	f3 0f 1e fa          	endbr64 
    1976:	55                   	push   %rbp
    1977:	48 89 e5             	mov    %rsp,%rbp
    197a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
    197e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1982:	48 8b 00             	mov    (%rax),%rax
    1985:	5d                   	pop    %rbp
    1986:	c3                   	ret    

0000000000001987 <_ZSt4moveIRSt16initializer_listIfEEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
    1987:	f3 0f 1e fa          	endbr64 
    198b:	55                   	push   %rbp
    198c:	48 89 e5             	mov    %rsp,%rbp
    198f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    1993:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1997:	5d                   	pop    %rbp
    1998:	c3                   	ret    
    1999:	90                   	nop

000000000000199a <_ZNSaIfEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
    199a:	f3 0f 1e fa          	endbr64 
    199e:	55                   	push   %rbp
    199f:	48 89 e5             	mov    %rsp,%rbp
    19a2:	48 83 ec 10          	sub    $0x10,%rsp
    19a6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    19aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    19ae:	48 89 c7             	mov    %rax,%rdi
    19b1:	e8 5e 04 00 00       	call   1e14 <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>
    19b6:	90                   	nop
    19b7:	c9                   	leave  
    19b8:	c3                   	ret    
    19b9:	90                   	nop

00000000000019ba <_ZNSaIfED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
    19ba:	f3 0f 1e fa          	endbr64 
    19be:	55                   	push   %rbp
    19bf:	48 89 e5             	mov    %rsp,%rbp
    19c2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    19c6:	90                   	nop
    19c7:	5d                   	pop    %rbp
    19c8:	c3                   	ret    
    19c9:	90                   	nop

00000000000019ca <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_>:
       *  initializer_list @a __l.
       *
       *  This will call the element type's copy constructor N times
       *  (where N is @a __l.size()) and do no memory reallocation.
       */
      vector(initializer_list<value_type> __l,
    19ca:	f3 0f 1e fa          	endbr64 
    19ce:	55                   	push   %rbp
    19cf:	48 89 e5             	mov    %rsp,%rbp
    19d2:	53                   	push   %rbx
    19d3:	48 83 ec 38          	sub    $0x38,%rsp
    19d7:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    19db:	48 89 f0             	mov    %rsi,%rax
    19de:	48 89 d6             	mov    %rdx,%rsi
    19e1:	48 89 f2             	mov    %rsi,%rdx
    19e4:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    19e8:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    19ec:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
    19f0:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    19f7:	00 00 
    19f9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    19fd:	31 c0                	xor    %eax,%eax
	     const allocator_type& __a = allocator_type())
      : _Base(__a)
    19ff:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    1a03:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    1a07:	48 89 d6             	mov    %rdx,%rsi
    1a0a:	48 89 c7             	mov    %rax,%rdi
    1a0d:	e8 32 04 00 00       	call   1e44 <_ZNSt12_Vector_baseIfSaIfEEC1ERKS0_>
      {
	_M_range_initialize(__l.begin(), __l.end(),
    1a12:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1a16:	48 89 c7             	mov    %rax,%rdi
    1a19:	e8 b8 04 00 00       	call   1ed6 <_ZNKSt16initializer_listIfE3endEv>
    1a1e:	48 89 c3             	mov    %rax,%rbx
    1a21:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1a25:	48 89 c7             	mov    %rax,%rdi
    1a28:	e8 93 04 00 00       	call   1ec0 <_ZNKSt16initializer_listIfE5beginEv>
    1a2d:	48 89 c1             	mov    %rax,%rcx
    1a30:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    1a34:	48 89 da             	mov    %rbx,%rdx
    1a37:	48 89 ce             	mov    %rcx,%rsi
    1a3a:	48 89 c7             	mov    %rax,%rdi
    1a3d:	e8 02 05 00 00       	call   1f44 <_ZNSt6vectorIfSaIfEE19_M_range_initializeIPKfEEvT_S5_St20forward_iterator_tag>
			    random_access_iterator_tag());
      }
    1a42:	eb 1e                	jmp    1a62 <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_+0x98>
    1a44:	f3 0f 1e fa          	endbr64 
    1a48:	48 89 c3             	mov    %rax,%rbx
    1a4b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    1a4f:	48 89 c7             	mov    %rax,%rdi
    1a52:	e8 17 04 00 00       	call   1e6e <_ZNSt12_Vector_baseIfSaIfEED1Ev>
    1a57:	48 89 d8             	mov    %rbx,%rax
    1a5a:	48 89 c7             	mov    %rax,%rdi
    1a5d:	e8 6e f7 ff ff       	call   11d0 <_Unwind_Resume@plt>
    1a62:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    1a66:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    1a6d:	00 00 
    1a6f:	74 05                	je     1a76 <_ZNSt6vectorIfSaIfEEC1ESt16initializer_listIfERKS0_+0xac>
    1a71:	e8 1a f7 ff ff       	call   1190 <__stack_chk_fail@plt>
    1a76:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    1a7a:	c9                   	leave  
    1a7b:	c3                   	ret    

0000000000001a7c <_ZNSt6vectorIfSaIfEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
    1a7c:	f3 0f 1e fa          	endbr64 
    1a80:	55                   	push   %rbp
    1a81:	48 89 e5             	mov    %rsp,%rbp
    1a84:	48 83 ec 10          	sub    $0x10,%rsp
    1a88:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator());
    1a8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1a90:	48 89 c7             	mov    %rax,%rdi
    1a93:	e8 60 05 00 00       	call   1ff8 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
    1a98:	48 89 c2             	mov    %rax,%rdx
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    1a9b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1a9f:	48 8b 48 08          	mov    0x8(%rax),%rcx
    1aa3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1aa7:	48 8b 00             	mov    (%rax),%rax
    1aaa:	48 89 ce             	mov    %rcx,%rsi
    1aad:	48 89 c7             	mov    %rax,%rdi
    1ab0:	e8 55 05 00 00       	call   200a <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
    1ab5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1ab9:	48 89 c7             	mov    %rax,%rdi
    1abc:	e8 ad 03 00 00       	call   1e6e <_ZNSt12_Vector_baseIfSaIfEED1Ev>
    1ac1:	90                   	nop
    1ac2:	c9                   	leave  
    1ac3:	c3                   	ret    

0000000000001ac4 <_ZNKSt6vectorIfSaIfEE5beginEv>:
       *  Returns a read-only (constant) iterator that points to the
       *  first element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      const_iterator
      begin() const _GLIBCXX_NOEXCEPT
    1ac4:	f3 0f 1e fa          	endbr64 
    1ac8:	55                   	push   %rbp
    1ac9:	48 89 e5             	mov    %rsp,%rbp
    1acc:	48 83 ec 20          	sub    $0x20,%rsp
    1ad0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    1ad4:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1adb:	00 00 
    1add:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    1ae1:	31 c0                	xor    %eax,%eax
      { return const_iterator(this->_M_impl._M_start); }
    1ae3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    1ae7:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
    1aeb:	48 89 d6             	mov    %rdx,%rsi
    1aee:	48 89 c7             	mov    %rax,%rdi
    1af1:	e8 42 05 00 00       	call   2038 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
    1af6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    1afa:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    1afe:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
    1b05:	00 00 
    1b07:	74 05                	je     1b0e <_ZNKSt6vectorIfSaIfEE5beginEv+0x4a>
    1b09:	e8 82 f6 ff ff       	call   1190 <__stack_chk_fail@plt>
    1b0e:	c9                   	leave  
    1b0f:	c3                   	ret    

0000000000001b10 <_ZNKSt6vectorIfSaIfEE3endEv>:
       *  Returns a read-only (constant) iterator that points one past
       *  the last element in the %vector.  Iteration is done in
       *  ordinary element order.
       */
      const_iterator
      end() const _GLIBCXX_NOEXCEPT
    1b10:	f3 0f 1e fa          	endbr64 
    1b14:	55                   	push   %rbp
    1b15:	48 89 e5             	mov    %rsp,%rbp
    1b18:	48 83 ec 20          	sub    $0x20,%rsp
    1b1c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    1b20:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1b27:	00 00 
    1b29:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    1b2d:	31 c0                	xor    %eax,%eax
      { return const_iterator(this->_M_impl._M_finish); }
    1b2f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    1b33:	48 8d 50 08          	lea    0x8(%rax),%rdx
    1b37:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
    1b3b:	48 89 d6             	mov    %rdx,%rsi
    1b3e:	48 89 c7             	mov    %rax,%rdi
    1b41:	e8 f2 04 00 00       	call   2038 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>
    1b46:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    1b4a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    1b4e:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
    1b55:	00 00 
    1b57:	74 05                	je     1b5e <_ZNKSt6vectorIfSaIfEE3endEv+0x4e>
    1b59:	e8 32 f6 ff ff       	call   1190 <__stack_chk_fail@plt>
    1b5e:	c9                   	leave  
    1b5f:	c3                   	ret    

0000000000001b60 <_ZSt12__to_addressIKfEPT_S2_>:
  template<typename _Ptr, typename _Tp>
    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;

  template<typename _Tp>
    constexpr _Tp*
    __to_address(_Tp* __ptr) noexcept
    1b60:	f3 0f 1e fa          	endbr64 
    1b64:	55                   	push   %rbp
    1b65:	48 89 e5             	mov    %rsp,%rbp
    1b68:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      static_assert(!std::is_function<_Tp>::value, "not a function pointer");
      return __ptr;
    1b6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
    1b70:	5d                   	pop    %rbp
    1b71:	c3                   	ret    

0000000000001b72 <_ZNKSt6vectorIfSaIfEE4dataEv>:
      _Tp*
      data() _GLIBCXX_NOEXCEPT
      { return _M_data_ptr(this->_M_impl._M_start); }

      const _Tp*
      data() const _GLIBCXX_NOEXCEPT
    1b72:	f3 0f 1e fa          	endbr64 
    1b76:	55                   	push   %rbp
    1b77:	48 89 e5             	mov    %rsp,%rbp
    1b7a:	48 83 ec 10          	sub    $0x10,%rsp
    1b7e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_data_ptr(this->_M_impl._M_start); }
    1b82:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1b86:	48 8b 10             	mov    (%rax),%rdx
    1b89:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1b8d:	48 89 d6             	mov    %rdx,%rsi
    1b90:	48 89 c7             	mov    %rax,%rdi
    1b93:	e8 c2 04 00 00       	call   205a <_ZNKSt6vectorIfSaIfEE11_M_data_ptrIfEEPT_S4_>
    1b98:	c9                   	leave  
    1b99:	c3                   	ret    

0000000000001b9a <_ZNKSt6vectorIfSaIfEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
    1b9a:	f3 0f 1e fa          	endbr64 
    1b9e:	55                   	push   %rbp
    1b9f:	48 89 e5             	mov    %rsp,%rbp
    1ba2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    1ba6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1baa:	48 8b 50 08          	mov    0x8(%rax),%rdx
    1bae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1bb2:	48 8b 08             	mov    (%rax),%rcx
    1bb5:	48 89 d0             	mov    %rdx,%rax
    1bb8:	48 29 c8             	sub    %rcx,%rax
    1bbb:	48 c1 f8 02          	sar    $0x2,%rax
    1bbf:	5d                   	pop    %rbp
    1bc0:	c3                   	ret    
    1bc1:	90                   	nop

0000000000001bc2 <_ZNSt4spanIKfLm18446744073709551615EEC1IPS0_EET_m>:
	span(_It __first, size_type __count)
    1bc2:	f3 0f 1e fa          	endbr64 
    1bc6:	55                   	push   %rbp
    1bc7:	48 89 e5             	mov    %rsp,%rbp
    1bca:	48 83 ec 20          	sub    $0x20,%rsp
    1bce:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    1bd2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    1bd6:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	: _M_ptr(std::to_address(__first)), _M_extent(__count)
    1bda:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    1bde:	48 89 c7             	mov    %rax,%rdi
    1be1:	e8 8a 04 00 00       	call   2070 <_ZSt10to_addressIKfEPT_S2_>
    1be6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    1bea:	48 89 02             	mov    %rax,(%rdx)
    1bed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1bf1:	48 8d 50 08          	lea    0x8(%rax),%rdx
    1bf5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    1bf9:	48 89 c6             	mov    %rax,%rsi
    1bfc:	48 89 d7             	mov    %rdx,%rdi
    1bff:	e8 ec f9 ff ff       	call   15f0 <_ZNSt8__detail16__extent_storageILm18446744073709551615EEC1Em>
	}
    1c04:	90                   	nop
    1c05:	c9                   	leave  
    1c06:	c3                   	ret    
    1c07:	90                   	nop

0000000000001c08 <_ZNSt4spanIKfLm18446744073709551615EEC1IRKSt6vectorIfSaIfEEEEOT_>:
	span(_Range&& __range)
    1c08:	f3 0f 1e fa          	endbr64 
    1c0c:	55                   	push   %rbp
    1c0d:	48 89 e5             	mov    %rsp,%rbp
    1c10:	53                   	push   %rbx
    1c11:	48 83 ec 18          	sub    $0x18,%rsp
    1c15:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    1c19:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	: span(ranges::data(__range), ranges::size(__range))
    1c1d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    1c21:	48 89 c6             	mov    %rax,%rsi
    1c24:	48 8d 05 d9 13 00 00 	lea    0x13d9(%rip),%rax        # 3004 <_ZNSt6ranges6__cust4sizeE>
    1c2b:	48 89 c7             	mov    %rax,%rdi
    1c2e:	e8 d5 fa ff ff       	call   1708 <_ZNKSt6ranges13__cust_access5_SizeclIRKSt6vectorIfSaIfEEEEDaOT_>
    1c33:	48 89 c3             	mov    %rax,%rbx
    1c36:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    1c3a:	48 89 c6             	mov    %rax,%rsi
    1c3d:	48 8d 05 c1 13 00 00 	lea    0x13c1(%rip),%rax        # 3005 <_ZNSt6ranges6__cust4dataE>
    1c44:	48 89 c7             	mov    %rax,%rdi
    1c47:	e8 9a fa ff ff       	call   16e6 <_ZNKSt6ranges13__cust_access5_DataclIRKSt6vectorIfSaIfEEEEDaOT_>
    1c4c:	48 89 c1             	mov    %rax,%rcx
    1c4f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    1c53:	48 89 da             	mov    %rbx,%rdx
    1c56:	48 89 ce             	mov    %rcx,%rsi
    1c59:	48 89 c7             	mov    %rax,%rdi
    1c5c:	e8 61 ff ff ff       	call   1bc2 <_ZNSt4spanIKfLm18446744073709551615EEC1IPS0_EET_m>
	}
    1c61:	90                   	nop
    1c62:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    1c66:	c9                   	leave  
    1c67:	c3                   	ret    

0000000000001c68 <_ZNSt6vectorIfSaIfEEixEm>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
    1c68:	f3 0f 1e fa          	endbr64 
    1c6c:	55                   	push   %rbp
    1c6d:	48 89 e5             	mov    %rsp,%rbp
    1c70:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    1c74:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return *(this->_M_impl._M_start + __n);
    1c78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1c7c:	48 8b 10             	mov    (%rax),%rdx
    1c7f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    1c83:	48 c1 e0 02          	shl    $0x2,%rax
    1c87:	48 01 d0             	add    %rdx,%rax
      }
    1c8a:	5d                   	pop    %rbp
    1c8b:	c3                   	ret    

0000000000001c8c <_ZNKSt6vectorIfSaIfEEixEm>:
      operator[](size_type __n) const _GLIBCXX_NOEXCEPT
    1c8c:	f3 0f 1e fa          	endbr64 
    1c90:	55                   	push   %rbp
    1c91:	48 89 e5             	mov    %rsp,%rbp
    1c94:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    1c98:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return *(this->_M_impl._M_start + __n);
    1c9c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1ca0:	48 8b 10             	mov    (%rax),%rdx
    1ca3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    1ca7:	48 c1 e0 02          	shl    $0x2,%rax
    1cab:	48 01 d0             	add    %rdx,%rax
      }
    1cae:	5d                   	pop    %rbp
    1caf:	c3                   	ret    

0000000000001cb0 <_ZNSt6vectorIfSaIfEEC1ERKS1_>:
      vector(const vector& __x)
    1cb0:	f3 0f 1e fa          	endbr64 
    1cb4:	55                   	push   %rbp
    1cb5:	48 89 e5             	mov    %rsp,%rbp
    1cb8:	41 55                	push   %r13
    1cba:	41 54                	push   %r12
    1cbc:	53                   	push   %rbx
    1cbd:	48 83 ec 28          	sub    $0x28,%rsp
    1cc1:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    1cc5:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    1cc9:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1cd0:	00 00 
    1cd2:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    1cd6:	31 c0                	xor    %eax,%eax
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    1cd8:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    1cdc:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    1ce0:	48 89 c7             	mov    %rax,%rdi
    1ce3:	e8 f6 03 00 00       	call   20de <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
    1ce8:	48 89 c2             	mov    %rax,%rdx
    1ceb:	48 8d 45 d7          	lea    -0x29(%rbp),%rax
    1cef:	48 89 d6             	mov    %rdx,%rsi
    1cf2:	48 89 c7             	mov    %rax,%rdi
    1cf5:	e8 94 03 00 00       	call   208e <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE17_S_select_on_copyERKS1_>
    1cfa:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    1cfe:	48 89 c7             	mov    %rax,%rdi
    1d01:	e8 94 fe ff ff       	call   1b9a <_ZNKSt6vectorIfSaIfEE4sizeEv>
    1d06:	48 89 c1             	mov    %rax,%rcx
    1d09:	48 8d 45 d7          	lea    -0x29(%rbp),%rax
    1d0d:	48 89 c2             	mov    %rax,%rdx
    1d10:	48 89 ce             	mov    %rcx,%rsi
    1d13:	48 89 df             	mov    %rbx,%rdi
    1d16:	e8 d5 03 00 00       	call   20f0 <_ZNSt12_Vector_baseIfSaIfEEC1EmRKS0_>
    1d1b:	48 8d 45 d7          	lea    -0x29(%rbp),%rax
    1d1f:	48 89 c7             	mov    %rax,%rdi
    1d22:	e8 93 fc ff ff       	call   19ba <_ZNSaIfED1Ev>
				      _M_get_Tp_allocator());
    1d27:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    1d2b:	48 89 c7             	mov    %rax,%rdi
    1d2e:	e8 c5 02 00 00       	call   1ff8 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
    1d33:	49 89 c5             	mov    %rax,%r13
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
    1d36:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    1d3a:	48 8b 18             	mov    (%rax),%rbx
    1d3d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    1d41:	48 89 c7             	mov    %rax,%rdi
    1d44:	e8 c7 fd ff ff       	call   1b10 <_ZNKSt6vectorIfSaIfEE3endEv>
    1d49:	49 89 c4             	mov    %rax,%r12
    1d4c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    1d50:	48 89 c7             	mov    %rax,%rdi
    1d53:	e8 6c fd ff ff       	call   1ac4 <_ZNKSt6vectorIfSaIfEE5beginEv>
    1d58:	4c 89 e9             	mov    %r13,%rcx
    1d5b:	48 89 da             	mov    %rbx,%rdx
    1d5e:	4c 89 e6             	mov    %r12,%rsi
    1d61:	48 89 c7             	mov    %rax,%rdi
    1d64:	e8 ec 03 00 00       	call   2155 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>
	this->_M_impl._M_finish =
    1d69:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    1d6d:	48 89 42 08          	mov    %rax,0x8(%rdx)
      }
    1d71:	90                   	nop
    1d72:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    1d76:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    1d7d:	00 00 
    1d7f:	74 43                	je     1dc4 <_ZNSt6vectorIfSaIfEEC1ERKS1_+0x114>
    1d81:	eb 3c                	jmp    1dbf <_ZNSt6vectorIfSaIfEEC1ERKS1_+0x10f>
    1d83:	f3 0f 1e fa          	endbr64 
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    1d87:	48 89 c3             	mov    %rax,%rbx
    1d8a:	48 8d 45 d7          	lea    -0x29(%rbp),%rax
    1d8e:	48 89 c7             	mov    %rax,%rdi
    1d91:	e8 24 fc ff ff       	call   19ba <_ZNSaIfED1Ev>
    1d96:	48 89 d8             	mov    %rbx,%rax
    1d99:	48 89 c7             	mov    %rax,%rdi
    1d9c:	e8 2f f4 ff ff       	call   11d0 <_Unwind_Resume@plt>
    1da1:	f3 0f 1e fa          	endbr64 
      }
    1da5:	48 89 c3             	mov    %rax,%rbx
    1da8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    1dac:	48 89 c7             	mov    %rax,%rdi
    1daf:	e8 ba 00 00 00       	call   1e6e <_ZNSt12_Vector_baseIfSaIfEED1Ev>
    1db4:	48 89 d8             	mov    %rbx,%rax
    1db7:	48 89 c7             	mov    %rax,%rdi
    1dba:	e8 11 f4 ff ff       	call   11d0 <_Unwind_Resume@plt>
    1dbf:	e8 cc f3 ff ff       	call   1190 <__stack_chk_fail@plt>
    1dc4:	48 83 c4 28          	add    $0x28,%rsp
    1dc8:	5b                   	pop    %rbx
    1dc9:	41 5c                	pop    %r12
    1dcb:	41 5d                	pop    %r13
    1dcd:	5d                   	pop    %rbp
    1dce:	c3                   	ret    
    1dcf:	90                   	nop

0000000000001dd0 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt4spanIS1_Lm18446744073709551615EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
    1dd0:	f3 0f 1e fa          	endbr64 
    1dd4:	55                   	push   %rbp
    1dd5:	48 89 e5             	mov    %rsp,%rbp
    1dd8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    1ddc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
    1de0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    1de4:	48 8b 10             	mov    (%rax),%rdx
    1de7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1deb:	48 89 10             	mov    %rdx,(%rax)
    1dee:	90                   	nop
    1def:	5d                   	pop    %rbp
    1df0:	c3                   	ret    
    1df1:	90                   	nop

0000000000001df2 <_ZNKSt4spanIKfLm18446744073709551615EE4sizeEv>:
      size() const noexcept
    1df2:	f3 0f 1e fa          	endbr64 
    1df6:	55                   	push   %rbp
    1df7:	48 89 e5             	mov    %rsp,%rbp
    1dfa:	48 83 ec 10          	sub    $0x10,%rsp
    1dfe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_extent._M_extent(); }
    1e02:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1e06:	48 83 c0 08          	add    $0x8,%rax
    1e0a:	48 89 c7             	mov    %rax,%rdi
    1e0d:	e8 fc f7 ff ff       	call   160e <_ZNKSt8__detail16__extent_storageILm18446744073709551615EE9_M_extentEv>
    1e12:	c9                   	leave  
    1e13:	c3                   	ret    

0000000000001e14 <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    1e14:	f3 0f 1e fa          	endbr64 
    1e18:	55                   	push   %rbp
    1e19:	48 89 e5             	mov    %rsp,%rbp
    1e1c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    1e20:	90                   	nop
    1e21:	5d                   	pop    %rbp
    1e22:	c3                   	ret    
    1e23:	90                   	nop

0000000000001e24 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>:
      struct _Vector_impl
    1e24:	f3 0f 1e fa          	endbr64 
    1e28:	55                   	push   %rbp
    1e29:	48 89 e5             	mov    %rsp,%rbp
    1e2c:	48 83 ec 10          	sub    $0x10,%rsp
    1e30:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    1e34:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1e38:	48 89 c7             	mov    %rax,%rdi
    1e3b:	e8 7a fb ff ff       	call   19ba <_ZNSaIfED1Ev>
    1e40:	90                   	nop
    1e41:	c9                   	leave  
    1e42:	c3                   	ret    
    1e43:	90                   	nop

0000000000001e44 <_ZNSt12_Vector_baseIfSaIfEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
    1e44:	f3 0f 1e fa          	endbr64 
    1e48:	55                   	push   %rbp
    1e49:	48 89 e5             	mov    %rsp,%rbp
    1e4c:	48 83 ec 10          	sub    $0x10,%rsp
    1e50:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    1e54:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_impl(__a) { }
    1e58:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1e5c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    1e60:	48 89 d6             	mov    %rdx,%rsi
    1e63:	48 89 c7             	mov    %rax,%rdi
    1e66:	e8 1f 03 00 00       	call   218a <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>
    1e6b:	90                   	nop
    1e6c:	c9                   	leave  
    1e6d:	c3                   	ret    

0000000000001e6e <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
    1e6e:	f3 0f 1e fa          	endbr64 
    1e72:	55                   	push   %rbp
    1e73:	48 89 e5             	mov    %rsp,%rbp
    1e76:	48 83 ec 10          	sub    $0x10,%rsp
    1e7a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    1e7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1e82:	48 8b 50 10          	mov    0x10(%rax),%rdx
    1e86:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1e8a:	48 8b 08             	mov    (%rax),%rcx
    1e8d:	48 89 d0             	mov    %rdx,%rax
    1e90:	48 29 c8             	sub    %rcx,%rax
    1e93:	48 c1 f8 02          	sar    $0x2,%rax
	_M_deallocate(_M_impl._M_start,
    1e97:	48 89 c2             	mov    %rax,%rdx
    1e9a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1e9e:	48 8b 08             	mov    (%rax),%rcx
    1ea1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1ea5:	48 89 ce             	mov    %rcx,%rsi
    1ea8:	48 89 c7             	mov    %rax,%rdi
    1eab:	e8 10 03 00 00       	call   21c0 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfm>
      }
    1eb0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1eb4:	48 89 c7             	mov    %rax,%rdi
    1eb7:	e8 68 ff ff ff       	call   1e24 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>
    1ebc:	90                   	nop
    1ebd:	c9                   	leave  
    1ebe:	c3                   	ret    
    1ebf:	90                   	nop

0000000000001ec0 <_ZNKSt16initializer_listIfE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
    1ec0:	f3 0f 1e fa          	endbr64 
    1ec4:	55                   	push   %rbp
    1ec5:	48 89 e5             	mov    %rsp,%rbp
    1ec8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    1ecc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1ed0:	48 8b 00             	mov    (%rax),%rax
    1ed3:	5d                   	pop    %rbp
    1ed4:	c3                   	ret    
    1ed5:	90                   	nop

0000000000001ed6 <_ZNKSt16initializer_listIfE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
    1ed6:	f3 0f 1e fa          	endbr64 
    1eda:	55                   	push   %rbp
    1edb:	48 89 e5             	mov    %rsp,%rbp
    1ede:	53                   	push   %rbx
    1edf:	48 83 ec 18          	sub    $0x18,%rsp
    1ee3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    1ee7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    1eeb:	48 89 c7             	mov    %rax,%rdi
    1eee:	e8 cd ff ff ff       	call   1ec0 <_ZNKSt16initializer_listIfE5beginEv>
    1ef3:	48 89 c3             	mov    %rax,%rbx
    1ef6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    1efa:	48 89 c7             	mov    %rax,%rdi
    1efd:	e8 f8 02 00 00       	call   21fa <_ZNKSt16initializer_listIfE4sizeEv>
    1f02:	48 c1 e0 02          	shl    $0x2,%rax
    1f06:	48 01 d8             	add    %rbx,%rax
    1f09:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    1f0d:	c9                   	leave  
    1f0e:	c3                   	ret    

0000000000001f0f <_ZSt8distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
    1f0f:	f3 0f 1e fa          	endbr64 
    1f13:	55                   	push   %rbp
    1f14:	48 89 e5             	mov    %rsp,%rbp
    1f17:	48 83 ec 10          	sub    $0x10,%rsp
    1f1b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    1f1f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
			     std::__iterator_category(__first));
    1f23:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    1f27:	48 89 c7             	mov    %rax,%rdi
    1f2a:	e8 e1 02 00 00       	call   2210 <_ZSt19__iterator_categoryIPKfENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
    1f2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1f33:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    1f37:	48 89 d6             	mov    %rdx,%rsi
    1f3a:	48 89 c7             	mov    %rax,%rdi
    1f3d:	e8 dc 02 00 00       	call   221e <_ZSt10__distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
    }
    1f42:	c9                   	leave  
    1f43:	c3                   	ret    

0000000000001f44 <_ZNSt6vectorIfSaIfEE19_M_range_initializeIPKfEEvT_S5_St20forward_iterator_tag>:
	}

      // Called by the second initialize_dispatch above
      template<typename _ForwardIterator>
	void
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
    1f44:	f3 0f 1e fa          	endbr64 
    1f48:	55                   	push   %rbp
    1f49:	48 89 e5             	mov    %rsp,%rbp
    1f4c:	53                   	push   %rbx
    1f4d:	48 83 ec 38          	sub    $0x38,%rsp
    1f51:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    1f55:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    1f59:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
			    std::forward_iterator_tag)
	{
	  const size_type __n = std::distance(__first, __last);
    1f5d:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    1f61:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    1f65:	48 89 d6             	mov    %rdx,%rsi
    1f68:	48 89 c7             	mov    %rax,%rdi
    1f6b:	e8 9f ff ff ff       	call   1f0f <_ZSt8distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_>
    1f70:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  this->_M_impl._M_start
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
    1f74:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
    1f78:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    1f7c:	48 89 c7             	mov    %rax,%rdi
    1f7f:	e8 74 00 00 00       	call   1ff8 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
    1f84:	48 89 c2             	mov    %rax,%rdx
    1f87:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    1f8b:	48 89 d6             	mov    %rdx,%rsi
    1f8e:	48 89 c7             	mov    %rax,%rdi
    1f91:	e8 a6 02 00 00       	call   223c <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEmRKS0_>
    1f96:	48 89 c6             	mov    %rax,%rsi
    1f99:	48 89 df             	mov    %rbx,%rdi
    1f9c:	e8 23 03 00 00       	call   22c4 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEm>
    1fa1:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    1fa5:	48 89 02             	mov    %rax,(%rdx)
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    1fa8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    1fac:	48 8b 10             	mov    (%rax),%rdx
    1faf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    1fb3:	48 c1 e0 02          	shl    $0x2,%rax
    1fb7:	48 01 c2             	add    %rax,%rdx
    1fba:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    1fbe:	48 89 50 10          	mov    %rdx,0x10(%rax)
	  this->_M_impl._M_finish =
	    std::__uninitialized_copy_a(__first, __last,
					this->_M_impl._M_start,
					_M_get_Tp_allocator());
    1fc2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    1fc6:	48 89 c7             	mov    %rax,%rdi
    1fc9:	e8 2a 00 00 00       	call   1ff8 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
    1fce:	48 89 c1             	mov    %rax,%rcx
	    std::__uninitialized_copy_a(__first, __last,
    1fd1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    1fd5:	48 8b 10             	mov    (%rax),%rdx
    1fd8:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
    1fdc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    1fe0:	48 89 c7             	mov    %rax,%rdi
    1fe3:	e8 13 03 00 00       	call   22fb <_ZSt22__uninitialized_copy_aIPKfPffET0_T_S4_S3_RSaIT1_E>
	  this->_M_impl._M_finish =
    1fe8:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    1fec:	48 89 42 08          	mov    %rax,0x8(%rdx)
	}
    1ff0:	90                   	nop
    1ff1:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    1ff5:	c9                   	leave  
    1ff6:	c3                   	ret    
    1ff7:	90                   	nop

0000000000001ff8 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
    1ff8:	f3 0f 1e fa          	endbr64 
    1ffc:	55                   	push   %rbp
    1ffd:	48 89 e5             	mov    %rsp,%rbp
    2000:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
    2004:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2008:	5d                   	pop    %rbp
    2009:	c3                   	ret    

000000000000200a <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
    200a:	f3 0f 1e fa          	endbr64 
    200e:	55                   	push   %rbp
    200f:	48 89 e5             	mov    %rsp,%rbp
    2012:	48 83 ec 20          	sub    $0x20,%rsp
    2016:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    201a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    201e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
    2022:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    2026:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    202a:	48 89 d6             	mov    %rdx,%rsi
    202d:	48 89 c7             	mov    %rax,%rdi
    2030:	e8 fb 02 00 00       	call   2330 <_ZSt8_DestroyIPfEvT_S1_>
    }
    2035:	90                   	nop
    2036:	c9                   	leave  
    2037:	c3                   	ret    

0000000000002038 <_ZN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
    2038:	f3 0f 1e fa          	endbr64 
    203c:	55                   	push   %rbp
    203d:	48 89 e5             	mov    %rsp,%rbp
    2040:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    2044:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
    2048:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    204c:	48 8b 10             	mov    (%rax),%rdx
    204f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2053:	48 89 10             	mov    %rdx,(%rax)
    2056:	90                   	nop
    2057:	5d                   	pop    %rbp
    2058:	c3                   	ret    
    2059:	90                   	nop

000000000000205a <_ZNKSt6vectorIfSaIfEE11_M_data_ptrIfEEPT_S4_>:
      }
#endif

      template<typename _Up>
	_Up*
	_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT
    205a:	f3 0f 1e fa          	endbr64 
    205e:	55                   	push   %rbp
    205f:	48 89 e5             	mov    %rsp,%rbp
    2062:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    2066:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return __ptr; }
    206a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    206e:	5d                   	pop    %rbp
    206f:	c3                   	ret    

0000000000002070 <_ZSt10to_addressIKfEPT_S2_>:
   * @return @c __ptr
   * @ingroup pointer_abstractions
  */
  template<typename _Tp>
    constexpr _Tp*
    to_address(_Tp* __ptr) noexcept
    2070:	f3 0f 1e fa          	endbr64 
    2074:	55                   	push   %rbp
    2075:	48 89 e5             	mov    %rsp,%rbp
    2078:	48 83 ec 10          	sub    $0x10,%rsp
    207c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__to_address(__ptr); }
    2080:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2084:	48 89 c7             	mov    %rax,%rdi
    2087:	e8 d4 fa ff ff       	call   1b60 <_ZSt12__to_addressIKfEPT_S2_>
    208c:	c9                   	leave  
    208d:	c3                   	ret    

000000000000208e <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE17_S_select_on_copyERKS1_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
    208e:	f3 0f 1e fa          	endbr64 
    2092:	55                   	push   %rbp
    2093:	48 89 e5             	mov    %rsp,%rbp
    2096:	48 83 ec 20          	sub    $0x20,%rsp
    209a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    209e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    20a2:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    20a9:	00 00 
    20ab:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    20af:	31 c0                	xor    %eax,%eax
    { return _Base_type::select_on_container_copy_construction(__a); }
    20b1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    20b5:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    20b9:	48 89 d6             	mov    %rdx,%rsi
    20bc:	48 89 c7             	mov    %rax,%rdi
    20bf:	e8 b3 02 00 00       	call   2377 <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>
    20c4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    20c8:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    20cf:	00 00 
    20d1:	74 05                	je     20d8 <_ZN9__gnu_cxx14__alloc_traitsISaIfEfE17_S_select_on_copyERKS1_+0x4a>
    20d3:	e8 b8 f0 ff ff       	call   1190 <__stack_chk_fail@plt>
    20d8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    20dc:	c9                   	leave  
    20dd:	c3                   	ret    

00000000000020de <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
    20de:	f3 0f 1e fa          	endbr64 
    20e2:	55                   	push   %rbp
    20e3:	48 89 e5             	mov    %rsp,%rbp
    20e6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl; }
    20ea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    20ee:	5d                   	pop    %rbp
    20ef:	c3                   	ret    

00000000000020f0 <_ZNSt12_Vector_baseIfSaIfEEC1EmRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
    20f0:	f3 0f 1e fa          	endbr64 
    20f4:	55                   	push   %rbp
    20f5:	48 89 e5             	mov    %rsp,%rbp
    20f8:	53                   	push   %rbx
    20f9:	48 83 ec 28          	sub    $0x28,%rsp
    20fd:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    2101:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    2105:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _M_impl(__a)
    2109:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    210d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    2111:	48 89 d6             	mov    %rdx,%rsi
    2114:	48 89 c7             	mov    %rax,%rdi
    2117:	e8 6e 00 00 00       	call   218a <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
    211c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    2120:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2124:	48 89 d6             	mov    %rdx,%rsi
    2127:	48 89 c7             	mov    %rax,%rdi
    212a:	e8 75 02 00 00       	call   23a4 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEm>
    212f:	eb 1e                	jmp    214f <_ZNSt12_Vector_baseIfSaIfEEC1EmRKS0_+0x5f>
    2131:	f3 0f 1e fa          	endbr64 
    2135:	48 89 c3             	mov    %rax,%rbx
    2138:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    213c:	48 89 c7             	mov    %rax,%rdi
    213f:	e8 e0 fc ff ff       	call   1e24 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>
    2144:	48 89 d8             	mov    %rbx,%rax
    2147:	48 89 c7             	mov    %rax,%rdi
    214a:	e8 81 f0 ff ff       	call   11d0 <_Unwind_Resume@plt>
    214f:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    2153:	c9                   	leave  
    2154:	c3                   	ret    

0000000000002155 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPffET0_T_SA_S9_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
    2155:	f3 0f 1e fa          	endbr64 
    2159:	55                   	push   %rbp
    215a:	48 89 e5             	mov    %rsp,%rbp
    215d:	48 83 ec 20          	sub    $0x20,%rsp
    2161:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    2165:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    2169:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    216d:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
    2171:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    2175:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    2179:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    217d:	48 89 ce             	mov    %rcx,%rsi
    2180:	48 89 c7             	mov    %rax,%rdi
    2183:	e8 76 02 00 00       	call   23fe <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
    2188:	c9                   	leave  
    2189:	c3                   	ret    

000000000000218a <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
    218a:	f3 0f 1e fa          	endbr64 
    218e:	55                   	push   %rbp
    218f:	48 89 e5             	mov    %rsp,%rbp
    2192:	48 83 ec 10          	sub    $0x10,%rsp
    2196:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    219a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Tp_alloc_type(__a)
    219e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    21a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    21a6:	48 89 d6             	mov    %rdx,%rsi
    21a9:	48 89 c7             	mov    %rax,%rdi
    21ac:	e8 83 02 00 00       	call   2434 <_ZNSaIfEC1ERKS_>
    21b1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    21b5:	48 89 c7             	mov    %rax,%rdi
    21b8:	e8 a1 02 00 00       	call   245e <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
    21bd:	90                   	nop
    21be:	c9                   	leave  
    21bf:	c3                   	ret    

00000000000021c0 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfm>:
      _M_deallocate(pointer __p, size_t __n)
    21c0:	f3 0f 1e fa          	endbr64 
    21c4:	55                   	push   %rbp
    21c5:	48 89 e5             	mov    %rsp,%rbp
    21c8:	48 83 ec 20          	sub    $0x20,%rsp
    21cc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    21d0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    21d4:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__p)
    21d8:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    21dd:	74 17                	je     21f6 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfm+0x36>
	  _Tr::deallocate(_M_impl, __p, __n);
    21df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    21e3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    21e7:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    21eb:	48 89 ce             	mov    %rcx,%rsi
    21ee:	48 89 c7             	mov    %rax,%rdi
    21f1:	e8 9a 02 00 00       	call   2490 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfm>
      }
    21f6:	90                   	nop
    21f7:	c9                   	leave  
    21f8:	c3                   	ret    
    21f9:	90                   	nop

00000000000021fa <_ZNKSt16initializer_listIfE4sizeEv>:
      size() const noexcept { return _M_len; }
    21fa:	f3 0f 1e fa          	endbr64 
    21fe:	55                   	push   %rbp
    21ff:	48 89 e5             	mov    %rsp,%rbp
    2202:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    2206:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    220a:	48 8b 40 08          	mov    0x8(%rax),%rax
    220e:	5d                   	pop    %rbp
    220f:	c3                   	ret    

0000000000002210 <_ZSt19__iterator_categoryIPKfENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
    2210:	f3 0f 1e fa          	endbr64 
    2214:	55                   	push   %rbp
    2215:	48 89 e5             	mov    %rsp,%rbp
    2218:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return typename iterator_traits<_Iter>::iterator_category(); }
    221c:	5d                   	pop    %rbp
    221d:	c3                   	ret    

000000000000221e <_ZSt10__distanceIPKfENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
    221e:	f3 0f 1e fa          	endbr64 
    2222:	55                   	push   %rbp
    2223:	48 89 e5             	mov    %rsp,%rbp
    2226:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    222a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      return __last - __first;
    222e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    2232:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
    2236:	48 c1 f8 02          	sar    $0x2,%rax
    }
    223a:	5d                   	pop    %rbp
    223b:	c3                   	ret    

000000000000223c <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEmRKS0_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
    223c:	f3 0f 1e fa          	endbr64 
    2240:	55                   	push   %rbp
    2241:	48 89 e5             	mov    %rsp,%rbp
    2244:	53                   	push   %rbx
    2245:	48 83 ec 28          	sub    $0x28,%rsp
    2249:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    224d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    2251:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    2258:	00 00 
    225a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    225e:	31 c0                	xor    %eax,%eax
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
    2260:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    2264:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
    2268:	48 89 d6             	mov    %rdx,%rsi
    226b:	48 89 c7             	mov    %rax,%rdi
    226e:	e8 c1 01 00 00       	call   2434 <_ZNSaIfEC1ERKS_>
    2273:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
    2277:	48 89 c7             	mov    %rax,%rdi
    227a:	e8 8b 02 00 00       	call   250a <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>
    227f:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
    2283:	0f 97 c3             	seta   %bl
    2286:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
    228a:	48 89 c7             	mov    %rax,%rdi
    228d:	e8 28 f7 ff ff       	call   19ba <_ZNSaIfED1Ev>
    2292:	84 db                	test   %bl,%bl
    2294:	74 0f                	je     22a5 <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEmRKS0_+0x69>
	  __throw_length_error(
    2296:	48 8d 05 6b 0d 00 00 	lea    0xd6b(%rip),%rax        # 3008 <_ZNSt6ranges6__cust4dataE+0x3>
    229d:	48 89 c7             	mov    %rax,%rdi
    22a0:	e8 7b ee ff ff       	call   1120 <_ZSt20__throw_length_errorPKc@plt>
	return __n;
    22a5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
      }
    22a9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    22ad:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
    22b4:	00 00 
    22b6:	74 05                	je     22bd <_ZNSt6vectorIfSaIfEE17_S_check_init_lenEmRKS0_+0x81>
    22b8:	e8 d3 ee ff ff       	call   1190 <__stack_chk_fail@plt>
    22bd:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    22c1:	c9                   	leave  
    22c2:	c3                   	ret    
    22c3:	90                   	nop

00000000000022c4 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEm>:
      _M_allocate(size_t __n)
    22c4:	f3 0f 1e fa          	endbr64 
    22c8:	55                   	push   %rbp
    22c9:	48 89 e5             	mov    %rsp,%rbp
    22cc:	48 83 ec 10          	sub    $0x10,%rsp
    22d0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    22d4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    22d8:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
    22dd:	74 15                	je     22f4 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEm+0x30>
    22df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    22e3:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    22e7:	48 89 d6             	mov    %rdx,%rsi
    22ea:	48 89 c7             	mov    %rax,%rdi
    22ed:	e8 81 02 00 00       	call   2573 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_m>
    22f2:	eb 05                	jmp    22f9 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEm+0x35>
    22f4:	b8 00 00 00 00       	mov    $0x0,%eax
      }
    22f9:	c9                   	leave  
    22fa:	c3                   	ret    

00000000000022fb <_ZSt22__uninitialized_copy_aIPKfPffET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
    22fb:	f3 0f 1e fa          	endbr64 
    22ff:	55                   	push   %rbp
    2300:	48 89 e5             	mov    %rsp,%rbp
    2303:	48 83 ec 20          	sub    $0x20,%rsp
    2307:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    230b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    230f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    2313:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    { return std::uninitialized_copy(__first, __last, __result); }
    2317:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    231b:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    231f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2323:	48 89 ce             	mov    %rcx,%rsi
    2326:	48 89 c7             	mov    %rax,%rdi
    2329:	e8 9f 02 00 00       	call   25cd <_ZSt18uninitialized_copyIPKfPfET0_T_S4_S3_>
    232e:	c9                   	leave  
    232f:	c3                   	ret    

0000000000002330 <_ZSt8_DestroyIPfEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    2330:	f3 0f 1e fa          	endbr64 
    2334:	55                   	push   %rbp
    2335:	48 89 e5             	mov    %rsp,%rbp
    2338:	48 83 ec 10          	sub    $0x10,%rsp
    233c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    2340:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      // A deleted destructor is trivial, this ensures we reject such types:
      static_assert(is_destructible<_Value_type>::value,
		    "value type is destructible");
#endif
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
    2344:	e8 97 f2 ff ff       	call   15e0 <_ZSt21is_constant_evaluatedv>
    2349:	84 c0                	test   %al,%al
    234b:	74 15                	je     2362 <_ZSt8_DestroyIPfEvT_S1_+0x32>
	return _Destroy_aux<false>::__destroy(__first, __last);
    234d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    2351:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2355:	48 89 d6             	mov    %rdx,%rsi
    2358:	48 89 c7             	mov    %rax,%rdi
    235b:	e8 a2 02 00 00       	call   2602 <_ZNSt12_Destroy_auxILb0EE9__destroyIPfEEvT_S3_>
    2360:	eb 13                	jmp    2375 <_ZSt8_DestroyIPfEvT_S1_+0x45>
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
    2362:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    2366:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    236a:	48 89 d6             	mov    %rdx,%rsi
    236d:	48 89 c7             	mov    %rax,%rdi
    2370:	e8 ca 02 00 00       	call   263f <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>
    }
    2375:	c9                   	leave  
    2376:	c3                   	ret    

0000000000002377 <_ZNSt16allocator_traitsISaIfEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
    2377:	f3 0f 1e fa          	endbr64 
    237b:	55                   	push   %rbp
    237c:	48 89 e5             	mov    %rsp,%rbp
    237f:	48 83 ec 10          	sub    $0x10,%rsp
    2383:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    2387:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __rhs; }
    238b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    238f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2393:	48 89 d6             	mov    %rdx,%rsi
    2396:	48 89 c7             	mov    %rax,%rdi
    2399:	e8 96 00 00 00       	call   2434 <_ZNSaIfEC1ERKS_>
    239e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    23a2:	c9                   	leave  
    23a3:	c3                   	ret    

00000000000023a4 <_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEm>:
      _M_create_storage(size_t __n)
    23a4:	f3 0f 1e fa          	endbr64 
    23a8:	55                   	push   %rbp
    23a9:	48 89 e5             	mov    %rsp,%rbp
    23ac:	48 83 ec 10          	sub    $0x10,%rsp
    23b0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    23b4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	this->_M_impl._M_start = this->_M_allocate(__n);
    23b8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    23bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    23c0:	48 89 d6             	mov    %rdx,%rsi
    23c3:	48 89 c7             	mov    %rax,%rdi
    23c6:	e8 f9 fe ff ff       	call   22c4 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEm>
    23cb:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    23cf:	48 89 02             	mov    %rax,(%rdx)
	this->_M_impl._M_finish = this->_M_impl._M_start;
    23d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    23d6:	48 8b 10             	mov    (%rax),%rdx
    23d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    23dd:	48 89 50 08          	mov    %rdx,0x8(%rax)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    23e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    23e5:	48 8b 10             	mov    (%rax),%rdx
    23e8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    23ec:	48 c1 e0 02          	shl    $0x2,%rax
    23f0:	48 01 c2             	add    %rax,%rdx
    23f3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    23f7:	48 89 50 10          	mov    %rdx,0x10(%rax)
      }
    23fb:	90                   	nop
    23fc:	c9                   	leave  
    23fd:	c3                   	ret    

00000000000023fe <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
    23fe:	f3 0f 1e fa          	endbr64 
    2402:	55                   	push   %rbp
    2403:	48 89 e5             	mov    %rsp,%rbp
    2406:	48 83 ec 30          	sub    $0x30,%rsp
    240a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    240e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    2412:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
    2416:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
	__uninit_copy(__first, __last, __result);
    241a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    241e:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    2422:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2426:	48 89 ce             	mov    %rcx,%rsi
    2429:	48 89 c7             	mov    %rax,%rdi
    242c:	e8 21 02 00 00       	call   2652 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>
    }
    2431:	c9                   	leave  
    2432:	c3                   	ret    
    2433:	90                   	nop

0000000000002434 <_ZNSaIfEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
    2434:	f3 0f 1e fa          	endbr64 
    2438:	55                   	push   %rbp
    2439:	48 89 e5             	mov    %rsp,%rbp
    243c:	48 83 ec 10          	sub    $0x10,%rsp
    2440:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    2444:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : __allocator_base<_Tp>(__a) { }
    2448:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    244c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2450:	48 89 d6             	mov    %rdx,%rsi
    2453:	48 89 c7             	mov    %rax,%rdi
    2456:	e8 29 02 00 00       	call   2684 <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>
    245b:	90                   	nop
    245c:	c9                   	leave  
    245d:	c3                   	ret    

000000000000245e <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
    245e:	f3 0f 1e fa          	endbr64 
    2462:	55                   	push   %rbp
    2463:	48 89 e5             	mov    %rsp,%rbp
    2466:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _M_start(), _M_finish(), _M_end_of_storage()
    246a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    246e:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    2475:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2479:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    2480:	00 
    2481:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2485:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
    248c:	00 
	{ }
    248d:	90                   	nop
    248e:	5d                   	pop    %rbp
    248f:	c3                   	ret    

0000000000002490 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfm>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
    2490:	f3 0f 1e fa          	endbr64 
    2494:	55                   	push   %rbp
    2495:	48 89 e5             	mov    %rsp,%rbp
    2498:	48 83 ec 40          	sub    $0x40,%rsp
    249c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    24a0:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    24a4:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    24a8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    24ac:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    24b0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    24b4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    24b8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    24bc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      [[__gnu__::__always_inline__]]
      constexpr void
      deallocate(_Tp* __p, size_t __n)
      {
#ifdef __cpp_lib_is_constant_evaluated
	if (std::is_constant_evaluated())
    24c0:	e8 1b f1 ff ff       	call   15e0 <_ZSt21is_constant_evaluatedv>
    24c5:	84 c0                	test   %al,%al
    24c7:	74 0e                	je     24d7 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfm+0x47>
	  {
	    ::operator delete(__p);
    24c9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    24cd:	48 89 c7             	mov    %rax,%rdi
    24d0:	e8 8b ec ff ff       	call   1160 <_ZdlPv@plt>
	    return;
    24d5:	eb 18                	jmp    24ef <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfm+0x5f>
	  }
#endif
	__allocator_base<_Tp>::deallocate(__p, __n);
    24d7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    24db:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    24df:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    24e3:	48 89 ce             	mov    %rcx,%rsi
    24e6:	48 89 c7             	mov    %rax,%rdi
    24e9:	e8 8a 02 00 00       	call   2778 <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfm>
      { __a.deallocate(__p, __n); }
    24ee:	90                   	nop
    24ef:	90                   	nop
    24f0:	c9                   	leave  
    24f1:	c3                   	ret    

00000000000024f2 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
    24f2:	f3 0f 1e fa          	endbr64 
    24f6:	55                   	push   %rbp
    24f7:	48 89 e5             	mov    %rsp,%rbp
    24fa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return size_t(-1) / sizeof(value_type);
    24fe:	48 b8 ff ff ff ff ff 	movabs $0x3fffffffffffffff,%rax
    2505:	ff ff 3f 
      }
    2508:	5d                   	pop    %rbp
    2509:	c3                   	ret    

000000000000250a <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
    250a:	f3 0f 1e fa          	endbr64 
    250e:	55                   	push   %rbp
    250f:	48 89 e5             	mov    %rsp,%rbp
    2512:	48 83 ec 30          	sub    $0x30,%rsp
    2516:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    251a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    2521:	00 00 
    2523:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    2527:	31 c0                	xor    %eax,%eax
	const size_t __diffmax
    2529:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
    2530:	ff ff 1f 
    2533:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	const size_t __allocmax = _Alloc_traits::max_size(__a);
    2537:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    253b:	48 89 c7             	mov    %rax,%rdi
    253e:	e8 af ff ff ff       	call   24f2 <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>
    2543:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return (std::min)(__diffmax, __allocmax);
    2547:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
    254b:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
    254f:	48 89 d6             	mov    %rdx,%rsi
    2552:	48 89 c7             	mov    %rax,%rdi
    2555:	e8 3d 01 00 00       	call   2697 <_ZSt3minImERKT_S2_S2_>
    255a:	48 8b 00             	mov    (%rax),%rax
      }
    255d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    2561:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
    2568:	00 00 
    256a:	74 05                	je     2571 <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_+0x67>
    256c:	e8 1f ec ff ff       	call   1190 <__stack_chk_fail@plt>
    2571:	c9                   	leave  
    2572:	c3                   	ret    

0000000000002573 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_m>:
      allocate(allocator_type& __a, size_type __n)
    2573:	f3 0f 1e fa          	endbr64 
    2577:	55                   	push   %rbp
    2578:	48 89 e5             	mov    %rsp,%rbp
    257b:	48 83 ec 20          	sub    $0x20,%rsp
    257f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    2583:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    2587:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    258b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    258f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    2593:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (std::is_constant_evaluated())
    2597:	e8 44 f0 ff ff       	call   15e0 <_ZSt21is_constant_evaluatedv>
    259c:	84 c0                	test   %al,%al
    259e:	74 12                	je     25b2 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_m+0x3f>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    25a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    25a4:	48 c1 e0 02          	shl    $0x2,%rax
    25a8:	48 89 c7             	mov    %rax,%rdi
    25ab:	e8 c0 eb ff ff       	call   1170 <_Znwm@plt>
    25b0:	eb 19                	jmp    25cb <_ZNSt16allocator_traitsISaIfEE8allocateERS0_m+0x58>
	return __allocator_base<_Tp>::allocate(__n, 0);
    25b2:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    25b6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    25ba:	ba 00 00 00 00       	mov    $0x0,%edx
    25bf:	48 89 ce             	mov    %rcx,%rsi
    25c2:	48 89 c7             	mov    %rax,%rdi
    25c5:	e8 fc 01 00 00       	call   27c6 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEmPKv>
    25ca:	90                   	nop
      { return __a.allocate(__n); }
    25cb:	c9                   	leave  
    25cc:	c3                   	ret    

00000000000025cd <_ZSt18uninitialized_copyIPKfPfET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
    25cd:	f3 0f 1e fa          	endbr64 
    25d1:	55                   	push   %rbp
    25d2:	48 89 e5             	mov    %rsp,%rbp
    25d5:	48 83 ec 30          	sub    $0x30,%rsp
    25d9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    25dd:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    25e1:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
    25e5:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
	__uninit_copy(__first, __last, __result);
    25e9:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    25ed:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    25f1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    25f5:	48 89 ce             	mov    %rcx,%rsi
    25f8:	48 89 c7             	mov    %rax,%rdi
    25fb:	e8 c6 00 00 00       	call   26c6 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKfPfEET0_T_S6_S5_>
    }
    2600:	c9                   	leave  
    2601:	c3                   	ret    

0000000000002602 <_ZNSt12_Destroy_auxILb0EE9__destroyIPfEEvT_S3_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
    2602:	f3 0f 1e fa          	endbr64 
    2606:	55                   	push   %rbp
    2607:	48 89 e5             	mov    %rsp,%rbp
    260a:	48 83 ec 10          	sub    $0x10,%rsp
    260e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    2612:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	  for (; __first != __last; ++__first)
    2616:	eb 19                	jmp    2631 <_ZNSt12_Destroy_auxILb0EE9__destroyIPfEEvT_S3_+0x2f>
	    std::_Destroy(std::__addressof(*__first));
    2618:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    261c:	48 89 c7             	mov    %rax,%rdi
    261f:	e8 d3 00 00 00       	call   26f7 <_ZSt11__addressofIfEPT_RS0_>
    2624:	48 89 c7             	mov    %rax,%rdi
    2627:	e8 dd 00 00 00       	call   2709 <_ZSt8_DestroyIfEvPT_>
	  for (; __first != __last; ++__first)
    262c:	48 83 45 f8 04       	addq   $0x4,-0x8(%rbp)
    2631:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2635:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    2639:	75 dd                	jne    2618 <_ZNSt12_Destroy_auxILb0EE9__destroyIPfEEvT_S3_+0x16>
	}
    263b:	90                   	nop
    263c:	90                   	nop
    263d:	c9                   	leave  
    263e:	c3                   	ret    

000000000000263f <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
    263f:	f3 0f 1e fa          	endbr64 
    2643:	55                   	push   %rbp
    2644:	48 89 e5             	mov    %rsp,%rbp
    2647:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    264b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    264f:	90                   	nop
    2650:	5d                   	pop    %rbp
    2651:	c3                   	ret    

0000000000002652 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
    2652:	f3 0f 1e fa          	endbr64 
    2656:	55                   	push   %rbp
    2657:	48 89 e5             	mov    %rsp,%rbp
    265a:	48 83 ec 20          	sub    $0x20,%rsp
    265e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    2662:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    2666:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
        { return std::copy(__first, __last, __result); }
    266a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    266e:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    2672:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2676:	48 89 ce             	mov    %rcx,%rsi
    2679:	48 89 c7             	mov    %rax,%rdi
    267c:	e8 a7 00 00 00       	call   2728 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>
    2681:	c9                   	leave  
    2682:	c3                   	ret    
    2683:	90                   	nop

0000000000002684 <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>:

      _GLIBCXX20_CONSTEXPR
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
    2684:	f3 0f 1e fa          	endbr64 
    2688:	55                   	push   %rbp
    2689:	48 89 e5             	mov    %rsp,%rbp
    268c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    2690:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    2694:	90                   	nop
    2695:	5d                   	pop    %rbp
    2696:	c3                   	ret    

0000000000002697 <_ZSt3minImERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
    2697:	f3 0f 1e fa          	endbr64 
    269b:	55                   	push   %rbp
    269c:	48 89 e5             	mov    %rsp,%rbp
    269f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    26a3:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
    26a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    26ab:	48 8b 10             	mov    (%rax),%rdx
    26ae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    26b2:	48 8b 00             	mov    (%rax),%rax
    26b5:	48 39 c2             	cmp    %rax,%rdx
    26b8:	73 06                	jae    26c0 <_ZSt3minImERKT_S2_S2_+0x29>
	return __b;
    26ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    26be:	eb 04                	jmp    26c4 <_ZSt3minImERKT_S2_S2_+0x2d>
      return __a;
    26c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
    26c4:	5d                   	pop    %rbp
    26c5:	c3                   	ret    

00000000000026c6 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKfPfEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
    26c6:	f3 0f 1e fa          	endbr64 
    26ca:	55                   	push   %rbp
    26cb:	48 89 e5             	mov    %rsp,%rbp
    26ce:	48 83 ec 20          	sub    $0x20,%rsp
    26d2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    26d6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    26da:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
        { return std::copy(__first, __last, __result); }
    26de:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    26e2:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    26e6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    26ea:	48 89 ce             	mov    %rcx,%rsi
    26ed:	48 89 c7             	mov    %rax,%rdi
    26f0:	e8 36 01 00 00       	call   282b <_ZSt4copyIPKfPfET0_T_S4_S3_>
    26f5:	c9                   	leave  
    26f6:	c3                   	ret    

00000000000026f7 <_ZSt11__addressofIfEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    26f7:	f3 0f 1e fa          	endbr64 
    26fb:	55                   	push   %rbp
    26fc:	48 89 e5             	mov    %rsp,%rbp
    26ff:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __builtin_addressof(__r); }
    2703:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2707:	5d                   	pop    %rbp
    2708:	c3                   	ret    

0000000000002709 <_ZSt8_DestroyIfEvPT_>:
    _Destroy(_Tp* __pointer)
    2709:	f3 0f 1e fa          	endbr64 
    270d:	55                   	push   %rbp
    270e:	48 89 e5             	mov    %rsp,%rbp
    2711:	48 83 ec 10          	sub    $0x10,%rsp
    2715:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      std::destroy_at(__pointer);
    2719:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    271d:	48 89 c7             	mov    %rax,%rdi
    2720:	e8 55 01 00 00       	call   287a <_ZSt10destroy_atIfEvPT_>
    }
    2725:	90                   	nop
    2726:	c9                   	leave  
    2727:	c3                   	ret    

0000000000002728 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET0_T_SA_S9_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
    2728:	f3 0f 1e fa          	endbr64 
    272c:	55                   	push   %rbp
    272d:	48 89 e5             	mov    %rsp,%rbp
    2730:	53                   	push   %rbx
    2731:	48 83 ec 28          	sub    $0x28,%rsp
    2735:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    2739:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    273d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
    2741:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    2745:	48 89 c7             	mov    %rax,%rdi
    2748:	e8 3c 01 00 00       	call   2889 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
    274d:	48 89 c3             	mov    %rax,%rbx
    2750:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2754:	48 89 c7             	mov    %rax,%rdi
    2757:	e8 2d 01 00 00       	call   2889 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>
    275c:	48 89 c1             	mov    %rax,%rcx
    275f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    2763:	48 89 c2             	mov    %rax,%rdx
    2766:	48 89 de             	mov    %rbx,%rsi
    2769:	48 89 cf             	mov    %rcx,%rdi
    276c:	e8 2a 01 00 00       	call   289b <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>
    }
    2771:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    2775:	c9                   	leave  
    2776:	c3                   	ret    
    2777:	90                   	nop

0000000000002778 <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfm>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
    2778:	f3 0f 1e fa          	endbr64 
    277c:	55                   	push   %rbp
    277d:	48 89 e5             	mov    %rsp,%rbp
    2780:	48 83 ec 20          	sub    $0x20,%rsp
    2784:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    2788:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    278c:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
    2790:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2794:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
    279b:	00 
    279c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    27a0:	48 89 d6             	mov    %rdx,%rsi
    27a3:	48 89 c7             	mov    %rax,%rdi
    27a6:	e8 d5 e9 ff ff       	call   1180 <_ZdlPvm@plt>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
    27ab:	c9                   	leave  
    27ac:	c3                   	ret    
    27ad:	90                   	nop

00000000000027ae <_ZNK9__gnu_cxx13new_allocatorIfE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
    27ae:	f3 0f 1e fa          	endbr64 
    27b2:	55                   	push   %rbp
    27b3:	48 89 e5             	mov    %rsp,%rbp
    27b6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
    27ba:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
    27c1:	ff ff 1f 
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
    27c4:	5d                   	pop    %rbp
    27c5:	c3                   	ret    

00000000000027c6 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEmPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
    27c6:	f3 0f 1e fa          	endbr64 
    27ca:	55                   	push   %rbp
    27cb:	48 89 e5             	mov    %rsp,%rbp
    27ce:	48 83 ec 20          	sub    $0x20,%rsp
    27d2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    27d6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    27da:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	if (__builtin_expect(__n > this->_M_max_size(), false))
    27de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    27e2:	48 89 c7             	mov    %rax,%rdi
    27e5:	e8 c4 ff ff ff       	call   27ae <_ZNK9__gnu_cxx13new_allocatorIfE11_M_max_sizeEv>
    27ea:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
    27ee:	0f 97 c0             	seta   %al
    27f1:	0f b6 c0             	movzbl %al,%eax
    27f4:	48 85 c0             	test   %rax,%rax
    27f7:	0f 95 c0             	setne  %al
    27fa:	84 c0                	test   %al,%al
    27fc:	74 1a                	je     2818 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEmPKv+0x52>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    27fe:	48 b8 ff ff ff ff ff 	movabs $0x3fffffffffffffff,%rax
    2805:	ff ff 3f 
    2808:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
    280c:	76 05                	jbe    2813 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEmPKv+0x4d>
	      std::__throw_bad_array_new_length();
    280e:	e8 2d e9 ff ff       	call   1140 <_ZSt28__throw_bad_array_new_lengthv@plt>
	    std::__throw_bad_alloc();
    2813:	e8 f8 e8 ff ff       	call   1110 <_ZSt17__throw_bad_allocv@plt>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    2818:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    281c:	48 c1 e0 02          	shl    $0x2,%rax
    2820:	48 89 c7             	mov    %rax,%rdi
    2823:	e8 48 e9 ff ff       	call   1170 <_Znwm@plt>
    2828:	90                   	nop
      }
    2829:	c9                   	leave  
    282a:	c3                   	ret    

000000000000282b <_ZSt4copyIPKfPfET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
    282b:	f3 0f 1e fa          	endbr64 
    282f:	55                   	push   %rbp
    2830:	48 89 e5             	mov    %rsp,%rbp
    2833:	53                   	push   %rbx
    2834:	48 83 ec 28          	sub    $0x28,%rsp
    2838:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    283c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    2840:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
    2844:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    2848:	48 89 c7             	mov    %rax,%rdi
    284b:	e8 b9 00 00 00       	call   2909 <_ZSt12__miter_baseIPKfET_S2_>
    2850:	48 89 c3             	mov    %rax,%rbx
    2853:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2857:	48 89 c7             	mov    %rax,%rdi
    285a:	e8 aa 00 00 00       	call   2909 <_ZSt12__miter_baseIPKfET_S2_>
    285f:	48 89 c1             	mov    %rax,%rcx
    2862:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    2866:	48 89 c2             	mov    %rax,%rdx
    2869:	48 89 de             	mov    %rbx,%rsi
    286c:	48 89 cf             	mov    %rcx,%rdi
    286f:	e8 a7 00 00 00       	call   291b <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>
    }
    2874:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    2878:	c9                   	leave  
    2879:	c3                   	ret    

000000000000287a <_ZSt10destroy_atIfEvPT_>:
    destroy_at(_Tp* __location)
    287a:	f3 0f 1e fa          	endbr64 
    287e:	55                   	push   %rbp
    287f:	48 89 e5             	mov    %rsp,%rbp
    2882:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    }
    2886:	90                   	nop
    2887:	5d                   	pop    %rbp
    2888:	c3                   	ret    

0000000000002889 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEET_S8_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
    2889:	f3 0f 1e fa          	endbr64 
    288d:	55                   	push   %rbp
    288e:	48 89 e5             	mov    %rsp,%rbp
    2891:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
    2895:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2899:	5d                   	pop    %rbp
    289a:	c3                   	ret    

000000000000289b <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEEEPfET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
    289b:	f3 0f 1e fa          	endbr64 
    289f:	55                   	push   %rbp
    28a0:	48 89 e5             	mov    %rsp,%rbp
    28a3:	41 54                	push   %r12
    28a5:	53                   	push   %rbx
    28a6:	48 83 ec 20          	sub    $0x20,%rsp
    28aa:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    28ae:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    28b2:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      return std::__niter_wrap(__result,
    28b6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    28ba:	48 89 c7             	mov    %rax,%rdi
    28bd:	e8 e8 00 00 00       	call   29aa <_ZSt12__niter_baseIPfET_S1_>
    28c2:	49 89 c4             	mov    %rax,%r12
    28c5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    28c9:	48 89 c7             	mov    %rax,%rdi
    28cc:	e8 b8 00 00 00       	call   2989 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
    28d1:	48 89 c3             	mov    %rax,%rbx
    28d4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    28d8:	48 89 c7             	mov    %rax,%rdi
    28db:	e8 a9 00 00 00       	call   2989 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
    28e0:	4c 89 e2             	mov    %r12,%rdx
    28e3:	48 89 de             	mov    %rbx,%rsi
    28e6:	48 89 c7             	mov    %rax,%rdi
    28e9:	e8 ce 00 00 00       	call   29bc <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>
    28ee:	48 89 c2             	mov    %rax,%rdx
    28f1:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
    28f5:	48 89 d6             	mov    %rdx,%rsi
    28f8:	48 89 c7             	mov    %rax,%rdi
    28fb:	e8 ed 00 00 00       	call   29ed <_ZSt12__niter_wrapIPfET_RKS1_S1_>
    }
    2900:	48 83 c4 20          	add    $0x20,%rsp
    2904:	5b                   	pop    %rbx
    2905:	41 5c                	pop    %r12
    2907:	5d                   	pop    %rbp
    2908:	c3                   	ret    

0000000000002909 <_ZSt12__miter_baseIPKfET_S2_>:
    __miter_base(_Iterator __it)
    2909:	f3 0f 1e fa          	endbr64 
    290d:	55                   	push   %rbp
    290e:	48 89 e5             	mov    %rsp,%rbp
    2911:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
    2915:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2919:	5d                   	pop    %rbp
    291a:	c3                   	ret    

000000000000291b <_ZSt13__copy_move_aILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
    291b:	f3 0f 1e fa          	endbr64 
    291f:	55                   	push   %rbp
    2920:	48 89 e5             	mov    %rsp,%rbp
    2923:	41 54                	push   %r12
    2925:	53                   	push   %rbx
    2926:	48 83 ec 20          	sub    $0x20,%rsp
    292a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    292e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    2932:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      return std::__niter_wrap(__result,
    2936:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    293a:	48 89 c7             	mov    %rax,%rdi
    293d:	e8 68 00 00 00       	call   29aa <_ZSt12__niter_baseIPfET_S1_>
    2942:	49 89 c4             	mov    %rax,%r12
    2945:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    2949:	48 89 c7             	mov    %rax,%rdi
    294c:	e8 b2 00 00 00       	call   2a03 <_ZSt12__niter_baseIPKfET_S2_>
    2951:	48 89 c3             	mov    %rax,%rbx
    2954:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2958:	48 89 c7             	mov    %rax,%rdi
    295b:	e8 a3 00 00 00       	call   2a03 <_ZSt12__niter_baseIPKfET_S2_>
    2960:	4c 89 e2             	mov    %r12,%rdx
    2963:	48 89 de             	mov    %rbx,%rsi
    2966:	48 89 c7             	mov    %rax,%rdi
    2969:	e8 4e 00 00 00       	call   29bc <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>
    296e:	48 89 c2             	mov    %rax,%rdx
    2971:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
    2975:	48 89 d6             	mov    %rdx,%rsi
    2978:	48 89 c7             	mov    %rax,%rdi
    297b:	e8 6d 00 00 00       	call   29ed <_ZSt12__niter_wrapIPfET_RKS1_S1_>
    }
    2980:	48 83 c4 20          	add    $0x20,%rsp
    2984:	5b                   	pop    %rbx
    2985:	41 5c                	pop    %r12
    2987:	5d                   	pop    %rbp
    2988:	c3                   	ret    

0000000000002989 <_ZSt12__niter_baseIPKfSt6vectorIfSaIfEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
    2989:	f3 0f 1e fa          	endbr64 
    298d:	55                   	push   %rbp
    298e:	48 89 e5             	mov    %rsp,%rbp
    2991:	48 83 ec 10          	sub    $0x10,%rsp
    2995:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }
    2999:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
    299d:	48 89 c7             	mov    %rax,%rdi
    29a0:	e8 2f ed ff ff       	call   16d4 <_ZNK9__gnu_cxx17__normal_iteratorIPKfSt6vectorIfSaIfEEE4baseEv>
    29a5:	48 8b 00             	mov    (%rax),%rax
    29a8:	c9                   	leave  
    29a9:	c3                   	ret    

00000000000029aa <_ZSt12__niter_baseIPfET_S1_>:
    __niter_base(_Iterator __it)
    29aa:	f3 0f 1e fa          	endbr64 
    29ae:	55                   	push   %rbp
    29af:	48 89 e5             	mov    %rsp,%rbp
    29b2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
    29b6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    29ba:	5d                   	pop    %rbp
    29bb:	c3                   	ret    

00000000000029bc <_ZSt14__copy_move_a1ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
    29bc:	f3 0f 1e fa          	endbr64 
    29c0:	55                   	push   %rbp
    29c1:	48 89 e5             	mov    %rsp,%rbp
    29c4:	48 83 ec 20          	sub    $0x20,%rsp
    29c8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    29cc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    29d0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
    29d4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    29d8:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    29dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    29e0:	48 89 ce             	mov    %rcx,%rsi
    29e3:	48 89 c7             	mov    %rax,%rdi
    29e6:	e8 2a 00 00 00       	call   2a15 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>
    29eb:	c9                   	leave  
    29ec:	c3                   	ret    

00000000000029ed <_ZSt12__niter_wrapIPfET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
    29ed:	f3 0f 1e fa          	endbr64 
    29f1:	55                   	push   %rbp
    29f2:	48 89 e5             	mov    %rsp,%rbp
    29f5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    29f9:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    { return __res; }
    29fd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    2a01:	5d                   	pop    %rbp
    2a02:	c3                   	ret    

0000000000002a03 <_ZSt12__niter_baseIPKfET_S2_>:
    __niter_base(_Iterator __it)
    2a03:	f3 0f 1e fa          	endbr64 
    2a07:	55                   	push   %rbp
    2a08:	48 89 e5             	mov    %rsp,%rbp
    2a0b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __it; }
    2a0f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2a13:	5d                   	pop    %rbp
    2a14:	c3                   	ret    

0000000000002a15 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
    2a15:	f3 0f 1e fa          	endbr64 
    2a19:	55                   	push   %rbp
    2a1a:	48 89 e5             	mov    %rsp,%rbp
    2a1d:	48 83 ec 20          	sub    $0x20,%rsp
    2a21:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    2a25:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    2a29:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      if (std::is_constant_evaluated())
    2a2d:	e8 ae eb ff ff       	call   15e0 <_ZSt21is_constant_evaluatedv>
    2a32:	84 c0                	test   %al,%al
    2a34:	74 19                	je     2a4f <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_+0x3a>
	  __copy_m(__first, __last, __result);
    2a36:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    2a3a:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    2a3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2a42:	48 89 ce             	mov    %rcx,%rsi
    2a45:	48 89 c7             	mov    %rax,%rdi
    2a48:	e8 1c 00 00 00       	call   2a69 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_>
    2a4d:	eb 18                	jmp    2a67 <_ZSt14__copy_move_a2ILb0EPKfPfET1_T0_S4_S3_+0x52>
			      _Category>::__copy_m(__first, __last, __result);
    2a4f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    2a53:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    2a57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2a5b:	48 89 ce             	mov    %rcx,%rsi
    2a5e:	48 89 c7             	mov    %rax,%rdi
    2a61:	e8 55 00 00 00       	call   2abb <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>
    2a66:	90                   	nop
    }
    2a67:	c9                   	leave  
    2a68:	c3                   	ret    

0000000000002a69 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_>:
	__copy_m(_II __first, _II __last, _OI __result)
    2a69:	f3 0f 1e fa          	endbr64 
    2a6d:	55                   	push   %rbp
    2a6e:	48 89 e5             	mov    %rsp,%rbp
    2a71:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    2a75:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    2a79:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  for(_Distance __n = __last - __first; __n > 0; --__n)
    2a7d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    2a81:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
    2a85:	48 c1 f8 02          	sar    $0x2,%rax
    2a89:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    2a8d:	eb 1f                	jmp    2aae <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_+0x45>
	      *__result = *__first;
    2a8f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2a93:	f3 0f 10 00          	movss  (%rax),%xmm0
    2a97:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    2a9b:	f3 0f 11 00          	movss  %xmm0,(%rax)
	      ++__first;
    2a9f:	48 83 45 e8 04       	addq   $0x4,-0x18(%rbp)
	      ++__result;
    2aa4:	48 83 45 d8 04       	addq   $0x4,-0x28(%rbp)
	  for(_Distance __n = __last - __first; __n > 0; --__n)
    2aa9:	48 83 6d f8 01       	subq   $0x1,-0x8(%rbp)
    2aae:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    2ab3:	7f da                	jg     2a8f <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKfPfEET0_T_S7_S6_+0x26>
	  return __result;
    2ab5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
	}
    2ab9:	5d                   	pop    %rbp
    2aba:	c3                   	ret    

0000000000002abb <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
    2abb:	f3 0f 1e fa          	endbr64 
    2abf:	55                   	push   %rbp
    2ac0:	48 89 e5             	mov    %rsp,%rbp
    2ac3:	48 83 ec 30          	sub    $0x30,%rsp
    2ac7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    2acb:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    2acf:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	  const ptrdiff_t _Num = __last - __first;
    2ad3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    2ad7:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
    2adb:	48 c1 f8 02          	sar    $0x2,%rax
    2adf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  if (_Num)
    2ae3:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    2ae8:	74 1f                	je     2b09 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIfEEPT_PKS3_S6_S4_+0x4e>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
    2aea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2aee:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
    2af5:	00 
    2af6:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    2afa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    2afe:	48 89 ce             	mov    %rcx,%rsi
    2b01:	48 89 c7             	mov    %rax,%rdi
    2b04:	e8 b7 e6 ff ff       	call   11c0 <memmove@plt>
	  return __result + _Num;
    2b09:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2b0d:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
    2b14:	00 
    2b15:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    2b19:	48 01 d0             	add    %rdx,%rax
	}
    2b1c:	c9                   	leave  
    2b1d:	c3                   	ret    

Disassembly of section .fini:

0000000000002b20 <_fini>:
    2b20:	f3 0f 1e fa          	endbr64 
    2b24:	48 83 ec 08          	sub    $0x8,%rsp
    2b28:	48 83 c4 08          	add    $0x8,%rsp
    2b2c:	c3                   	ret    
